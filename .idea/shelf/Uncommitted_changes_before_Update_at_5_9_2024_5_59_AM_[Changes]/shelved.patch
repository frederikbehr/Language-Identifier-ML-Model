Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"094c4da1-f913-4ead-956e-504ebdebe075\" name=\"Changes\" comment=\"finished the scraper that gets the words, and started on making the model.ipynb\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/model.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/model.ipynb\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n        <option value=\"Jupyter Notebook\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;frederikbehr&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/frederikbehr/bookScraper&quot;,\r\n    &quot;accountId&quot;: &quot;a1ceff9a-a22e-4d55-a18f-7f81ab8f7f44&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2g9HwADAHy1BqC4AImrpKuMe5Fd\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.sentence.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;/Users/frederikalexanderbehrens/PycharmProjects/languageLense/data/Swedish&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$/data/Swedish\" />\r\n      <recent name=\"$PROJECT_DIR$/data/Norwegian\" />\r\n      <recent name=\"$PROJECT_DIR$\" />\r\n      <recent name=\"$PROJECT_DIR$/data/Italian\" />\r\n      <recent name=\"$PROJECT_DIR$/data/Danish\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"languageLense\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-91d5c284f522-JavaScript-PY-241.15989.155\" />\r\n        <option value=\"bundled-python-sdk-babbdf50b680-7c6932dee5e4-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-241.15989.155\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"094c4da1-f913-4ead-956e-504ebdebe075\" name=\"Changes\" comment=\"\" />\r\n      <created>1715103109466</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1715103109466</updated>\r\n      <workItem from=\"1715103112886\" duration=\"552000\" />\r\n      <workItem from=\"1715103765254\" duration=\"18002000\" />\r\n      <workItem from=\"1715173808593\" duration=\"186000\" />\r\n      <workItem from=\"1715174027315\" duration=\"1229000\" />\r\n      <workItem from=\"1715175283405\" duration=\"4947000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"first commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715103171708</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715103171708</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"first commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715103241019</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715103241019</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"finished the scraper that gets the words, and started on making the model.ipynb\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715122448908</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715122448908</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"first commit\" />\r\n    <MESSAGE value=\"finished the scraper that gets the words, and started on making the model.ipynb\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"finished the scraper that gets the words, and started on making the model.ipynb\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/languageLense$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1715122050520\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/bookScraper$sentence.coverage\" NAME=\"sentence Coverage Results\" MODIFIED=\"1715181085655\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/bookScraper$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1715174462631\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision a0f129406283265cf5d1316552e5be127c198cae)
+++ b/.idea/workspace.xml	(date 1715227141230)
@@ -4,10 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="094c4da1-f913-4ead-956e-504ebdebe075" name="Changes" comment="finished the scraper that gets the words, and started on making the model.ipynb">
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+    <list default="true" id="094c4da1-f913-4ead-956e-504ebdebe075" name="Changes" comment="model is saved. val_accuracy: 82.3%">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/model.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/model.ipynb" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/model.keras" beforeDir="false" afterPath="$PROJECT_DIR$/model.keras" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -41,13 +41,16 @@
   &quot;associatedIndex&quot;: 2
 }</component>
   <component name="ProjectId" id="2g9HwADAHy1BqC4AImrpKuMe5Fd" />
-  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
+    <ConfirmationsSetting value="2" id="Add" />
+  </component>
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
   <component name="PropertiesComponent">{
   &quot;keyToString&quot;: {
+    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
     &quot;Python.main.executor&quot;: &quot;Run&quot;,
     &quot;Python.sentence.executor&quot;: &quot;Run&quot;,
     &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
@@ -117,7 +120,8 @@
       <workItem from="1715103765254" duration="18002000" />
       <workItem from="1715173808593" duration="186000" />
       <workItem from="1715174027315" duration="1229000" />
-      <workItem from="1715175283405" duration="4947000" />
+      <workItem from="1715175283405" duration="8324000" />
+      <workItem from="1715214649277" duration="4506000" />
     </task>
     <task id="LOCAL-00001" summary="first commit">
       <option name="closed" value="true" />
@@ -143,20 +147,30 @@
       <option name="project" value="LOCAL" />
       <updated>1715122448908</updated>
     </task>
-    <option name="localTasksCounter" value="4" />
+    <task id="LOCAL-00004" summary="model is saved. val_accuracy: 82.3%">
+      <option name="closed" value="true" />
+      <created>1715190345153</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1715190345153</updated>
+    </task>
+    <option name="localTasksCounter" value="5" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
   </component>
   <component name="VcsManagerConfiguration">
+    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
     <MESSAGE value="first commit" />
     <MESSAGE value="finished the scraper that gets the words, and started on making the model.ipynb" />
-    <option name="LAST_COMMIT_MESSAGE" value="finished the scraper that gets the words, and started on making the model.ipynb" />
+    <MESSAGE value="model is saved. val_accuracy: 82.3%" />
+    <option name="LAST_COMMIT_MESSAGE" value="model is saved. val_accuracy: 82.3%" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/languageLense$main.coverage" NAME="main Coverage Results" MODIFIED="1715122050520" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/bookScraper$sentence.coverage" NAME="sentence Coverage Results" MODIFIED="1715181085655" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/bookScraper$sentence.coverage" NAME="sentence Coverage Results" MODIFIED="1715214742303" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/bookScraper$main.coverage" NAME="main Coverage Results" MODIFIED="1715174462631" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
Index: model.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"id\": \"initial_id\",\r\n   \"metadata\": {\r\n    \"collapsed\": true,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-09T01:33:11.013888Z\",\r\n     \"start_time\": \"2024-05-09T01:33:11.006413Z\"\r\n    }\r\n   },\r\n   \"source\": [\r\n    \"import numpy as np\\n\",\r\n    \"import pandas as pd\\n\",\r\n    \"import matplotlib.pyplot as plt\\n\",\r\n    \"import seaborn as sns\\n\",\r\n    \"import tensorflow as tf\\n\",\r\n    \"from tensorflow.keras.models import Sequential\\n\",\r\n    \"from tensorflow.keras.layers import Dense, Embedding, Conv1D, GlobalMaxPooling1D, LSTM, Dropout\\n\",\r\n    \"from tensorflow.keras import optimizers\\n\",\r\n    \"from tensorflow.keras.preprocessing.text import Tokenizer\\n\",\r\n    \"from keras.src.utils import pad_sequences\\n\",\r\n    \"from sklearn.model_selection import train_test_split\"\r\n   ],\r\n   \"outputs\": [],\r\n   \"execution_count\": 845\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# Get data\\n\",\r\n    \"Pandas is used to get the data from the project directory.\\n\",\r\n    \"The data is a .csv file, that has been created by book texts and prepared to be listed in the file word-by-word.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   },\r\n   \"id\": \"b20ed3afab281b03\"\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"df = pd.read_csv('dataset.csv')\\n\",\r\n    \"df = df.sample(frac=1.0, random_state=42)\\n\",\r\n    \"df.head()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-09T01:33:11.062489Z\",\r\n     \"start_time\": \"2024-05-09T01:33:11.010337Z\"\r\n    }\r\n   },\r\n   \"id\": \"9934f095638f49f4\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"                                                Word Language\\n24443  doors and were in the car speeding toward the  English\\n13609                    questi li ha in custodia un  Italian\\n43979        jeg henter mine udtryk fra mine daglige   Danish\\n33611                   εσύ θα τα βρεις με την έστερ    Greek\\n44954              nå gør han det? sagde ravn gnaven   Danish\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>Word</th>\\n      <th>Language</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>24443</th>\\n      <td>doors and were in the car speeding toward the</td>\\n      <td>English</td>\\n    </tr>\\n    <tr>\\n      <th>13609</th>\\n      <td>questi li ha in custodia un</td>\\n      <td>Italian</td>\\n    </tr>\\n    <tr>\\n      <th>43979</th>\\n      <td>jeg henter mine udtryk fra mine daglige</td>\\n      <td>Danish</td>\\n    </tr>\\n    <tr>\\n      <th>33611</th>\\n      <td>εσύ θα τα βρεις με την έστερ</td>\\n      <td>Greek</td>\\n    </tr>\\n    <tr>\\n      <th>44954</th>\\n      <td>nå gør han det? sagde ravn gnaven</td>\\n      <td>Danish</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 846,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 846\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# Prepare data\\n\",\r\n    \"Divide the data into X and y. X is input and y is the desired output.\\n\",\r\n    \"One-Hot Encode it, so the language is categorical. This is done with Pandas.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   },\r\n   \"id\": \"e375f9241e794ae4\"\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Getting X - the input values\\n\",\r\n    \"X = df.iloc[:, :-1]\\n\",\r\n    \"X.loc[:, 'Word'] = X['Word'].astype(str)\\n\",\r\n    \"tokenizer = Tokenizer(char_level=True) # Used for turning the words into numbers\\n\",\r\n    \"tokenizer.fit_on_texts(X['Word'].tolist()) # Giving Tokenizer the data it needs to learn how to encode the words\\n\",\r\n    \"X_sequences = tokenizer.texts_to_sequences(X['Word'].tolist()) # Now the words are encoded into sequences\\n\",\r\n    \"input_dim = max(len(seq) for seq in X_sequences)\\n\",\r\n    \"X = pad_sequences(\\n\",\r\n    \"    X_sequences, \\n\",\r\n    \"    maxlen=input_dim, \\n\",\r\n    \"    padding='post'\\n\",\r\n    \") # Making all input values be of same length\\n\",\r\n    \"print(f\\\"Rows: {len(X)}\\\")\\n\",\r\n    \"\\n\",\r\n    \"# Getting y - the output values\\n\",\r\n    \"y_pre_training = df.iloc[:, -1:]\\n\",\r\n    \"y = pd.get_dummies(y_pre_training).values\\n\",\r\n    \"print(f\\\"Amount of languages to identify: {len(y[1])}\\\")\\n\",\r\n    \"\\n\",\r\n    \"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\\n\",\r\n    \"X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-09T01:33:11.673510Z\",\r\n     \"start_time\": \"2024-05-09T01:33:11.065738Z\"\r\n    }\r\n   },\r\n   \"id\": \"ba4d86402045de27\",\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Rows: 60119\\n\",\r\n      \"Amount of languages to identify: 13\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"execution_count\": 847\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"model = Sequential()\\n\",\r\n    \"model.add(Conv1D(input_dim, 13, activation='relu'))  # Convolutional layer\\n\",\r\n    \"tf.keras.layers.SimpleRNN(10, activation='relu'),\\n\",\r\n    \"tf.keras.layers.SimpleRNN(64, activation='relu'),\\n\",\r\n    \"model.add(LSTM(64, return_sequences=True))\\n\",\r\n    \"model.add(GlobalMaxPooling1D())  # Pooling layer\\n\",\r\n    \"model.add(Dense(64, activation='relu'))  # Dense layer\\n\",\r\n    \"model.add(Dense(64, activation='relu'))  # Dense layer\\n\",\r\n    \"model.add(Dense(64, activation='relu'))  # Dense layer\\n\",\r\n    \"model.add(Dropout(0.6))\\n\",\r\n    \"model.add(Dense(len(y[1]), activation='softmax'))\\n\",\r\n    \"adam = optimizers.Adam(learning_rate=0.001)\\n\",\r\n    \"model.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy', 'categorical_crossentropy'])\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-09T01:33:11.686967Z\",\r\n     \"start_time\": \"2024-05-09T01:33:11.676686Z\"\r\n    }\r\n   },\r\n   \"id\": \"c870f2fa48fe956c\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 848\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"history = model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=20, batch_size=512,verbose=1)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-09T01:36:11.127173Z\",\r\n     \"start_time\": \"2024-05-09T01:33:11.688716Z\"\r\n    }\r\n   },\r\n   \"id\": \"d9a29cb1ff2dcba7\",\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Epoch 1/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m10s\\u001B[0m 97ms/step - accuracy: 0.2768 - categorical_crossentropy: 2.2918 - loss: 2.2918 - val_accuracy: 0.4592 - val_categorical_crossentropy: 1.7266 - val_loss: 1.7266\\n\",\r\n      \"Epoch 2/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m9s\\u001B[0m 97ms/step - accuracy: 0.4446 - categorical_crossentropy: 1.7725 - loss: 1.7725 - val_accuracy: 0.4870 - val_categorical_crossentropy: 1.6033 - val_loss: 1.6033\\n\",\r\n      \"Epoch 3/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m9s\\u001B[0m 95ms/step - accuracy: 0.4698 - categorical_crossentropy: 1.6738 - loss: 1.6738 - val_accuracy: 0.4874 - val_categorical_crossentropy: 1.5687 - val_loss: 1.5687\\n\",\r\n      \"Epoch 4/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m9s\\u001B[0m 91ms/step - accuracy: 0.4802 - categorical_crossentropy: 1.6108 - loss: 1.6108 - val_accuracy: 0.4938 - val_categorical_crossentropy: 1.5277 - val_loss: 1.5277\\n\",\r\n      \"Epoch 5/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m9s\\u001B[0m 91ms/step - accuracy: 0.4961 - categorical_crossentropy: 1.5615 - loss: 1.5615 - val_accuracy: 0.5183 - val_categorical_crossentropy: 1.4662 - val_loss: 1.4662\\n\",\r\n      \"Epoch 6/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m9s\\u001B[0m 91ms/step - accuracy: 0.5052 - categorical_crossentropy: 1.5175 - loss: 1.5175 - val_accuracy: 0.5272 - val_categorical_crossentropy: 1.4480 - val_loss: 1.4480\\n\",\r\n      \"Epoch 7/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m9s\\u001B[0m 98ms/step - accuracy: 0.5185 - categorical_crossentropy: 1.4888 - loss: 1.4888 - val_accuracy: 0.5444 - val_categorical_crossentropy: 1.3891 - val_loss: 1.3891\\n\",\r\n      \"Epoch 8/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m9s\\u001B[0m 98ms/step - accuracy: 0.5309 - categorical_crossentropy: 1.4400 - loss: 1.4400 - val_accuracy: 0.5405 - val_categorical_crossentropy: 1.3972 - val_loss: 1.3972\\n\",\r\n      \"Epoch 9/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m9s\\u001B[0m 96ms/step - accuracy: 0.5389 - categorical_crossentropy: 1.4189 - loss: 1.4189 - val_accuracy: 0.5581 - val_categorical_crossentropy: 1.3439 - val_loss: 1.3439\\n\",\r\n      \"Epoch 10/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m9s\\u001B[0m 92ms/step - accuracy: 0.5479 - categorical_crossentropy: 1.3826 - loss: 1.3826 - val_accuracy: 0.5680 - val_categorical_crossentropy: 1.3140 - val_loss: 1.3140\\n\",\r\n      \"Epoch 11/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m9s\\u001B[0m 92ms/step - accuracy: 0.5622 - categorical_crossentropy: 1.3498 - loss: 1.3498 - val_accuracy: 0.5676 - val_categorical_crossentropy: 1.3006 - val_loss: 1.3006\\n\",\r\n      \"Epoch 12/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m9s\\u001B[0m 93ms/step - accuracy: 0.5688 - categorical_crossentropy: 1.3188 - loss: 1.3188 - val_accuracy: 0.5730 - val_categorical_crossentropy: 1.3257 - val_loss: 1.3257\\n\",\r\n      \"Epoch 13/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m9s\\u001B[0m 93ms/step - accuracy: 0.5741 - categorical_crossentropy: 1.2955 - loss: 1.2955 - val_accuracy: 0.5937 - val_categorical_crossentropy: 1.2287 - val_loss: 1.2287\\n\",\r\n      \"Epoch 14/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m9s\\u001B[0m 96ms/step - accuracy: 0.5847 - categorical_crossentropy: 1.2673 - loss: 1.2673 - val_accuracy: 0.6000 - val_categorical_crossentropy: 1.2121 - val_loss: 1.2121\\n\",\r\n      \"Epoch 15/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m10s\\u001B[0m 103ms/step - accuracy: 0.5934 - categorical_crossentropy: 1.2284 - loss: 1.2284 - val_accuracy: 0.6042 - val_categorical_crossentropy: 1.1981 - val_loss: 1.1981\\n\",\r\n      \"Epoch 16/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m9s\\u001B[0m 99ms/step - accuracy: 0.5961 - categorical_crossentropy: 1.2228 - loss: 1.2228 - val_accuracy: 0.5962 - val_categorical_crossentropy: 1.2037 - val_loss: 1.2037\\n\",\r\n      \"Epoch 17/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m9s\\u001B[0m 93ms/step - accuracy: 0.5975 - categorical_crossentropy: 1.2115 - loss: 1.2115 - val_accuracy: 0.6081 - val_categorical_crossentropy: 1.1704 - val_loss: 1.1704\\n\",\r\n      \"Epoch 18/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m9s\\u001B[0m 93ms/step - accuracy: 0.6075 - categorical_crossentropy: 1.1851 - loss: 1.1851 - val_accuracy: 0.6171 - val_categorical_crossentropy: 1.1453 - val_loss: 1.1453\\n\",\r\n      \"Epoch 19/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m9s\\u001B[0m 97ms/step - accuracy: 0.6160 - categorical_crossentropy: 1.1576 - loss: 1.1576 - val_accuracy: 0.6188 - val_categorical_crossentropy: 1.1392 - val_loss: 1.1392\\n\",\r\n      \"Epoch 20/20\\n\",\r\n      \"\\u001B[1m94/94\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m9s\\u001B[0m 93ms/step - accuracy: 0.6216 - categorical_crossentropy: 1.1443 - loss: 1.1443 - val_accuracy: 0.6257 - val_categorical_crossentropy: 1.1028 - val_loss: 1.1028\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"execution_count\": 849\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"%matplotlib inline\\n\",\r\n    \"plt.plot(history.history['loss'])\\n\",\r\n    \"plt.plot(history.history['val_loss'])\\n\",\r\n    \"plt.title(\\\"Model's MSE\\\")\\n\",\r\n    \"plt.legend(['Train', 'Val'], loc='upper right')\\n\",\r\n    \"plt.ylabel('Loss')\\n\",\r\n    \"plt.xlabel('Epoch')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-09T01:36:11.285253Z\",\r\n     \"start_time\": \"2024-05-09T01:36:11.143797Z\"\r\n    }\r\n   },\r\n   \"id\": \"db97a7f3cc91e456\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"Text(0.5, 0, 'Epoch')\"\r\n     },\r\n     \"execution_count\": 850,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    },\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"<Figure size 640x480 with 1 Axes>\",\r\n      \"image/png\": \"\"\r\n     },\r\n     \"metadata\": {},\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"execution_count\": 850\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# Prediction\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   },\r\n   \"id\": \"4fb3930ce2fec85d\"\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"prediction_word = \\\"också en kvinna\\\"\\n\",\r\n    \"prediction_word = tokenizer.texts_to_sequences([prediction_word])\\n\",\r\n    \"prediction_word = pad_sequences(prediction_word, maxlen=input_dim)\\n\",\r\n    \"prediction = model.predict([prediction_word])\\n\",\r\n    \"output_probabilities = np.array(prediction)\\n\",\r\n    \"\\n\",\r\n    \"result = []\\n\",\r\n    \"class_labels = np.unique(y_pre_training)\\n\",\r\n    \"for index, prediction in enumerate(output_probabilities[0]):\\n\",\r\n    \"    result.append(f\\\"{class_labels[index]} - {round(prediction*100, 1)}%\\\")\\n\",\r\n    \"\\n\",\r\n    \"for r in result:\\n\",\r\n    \"    print(r)\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-09T01:36:11.452034Z\",\r\n     \"start_time\": \"2024-05-09T01:36:11.288297Z\"\r\n    }\r\n   },\r\n   \"id\": \"2af1ef5d86413ee6\",\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"\\u001B[1m1/1\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m0s\\u001B[0m 106ms/step\\n\",\r\n      \"Danish - 39.9%\\n\",\r\n      \"Dutch - 3.4%\\n\",\r\n      \"English - 9.8%\\n\",\r\n      \"French - 0.7%\\n\",\r\n      \"German - 3.7%\\n\",\r\n      \"Greek - 0.0%\\n\",\r\n      \"Italian - 0.6%\\n\",\r\n      \"Norwegian - 27.0%\\n\",\r\n      \"Polish - 1.0%\\n\",\r\n      \"Portuguese - 0.3%\\n\",\r\n      \"Russian - 0.0%\\n\",\r\n      \"Spanish - 2.5%\\n\",\r\n      \"Swedish - 10.9%\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"execution_count\": 851\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"model.save('./model.keras')\",\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-09T01:36:11.465457Z\",\r\n     \"start_time\": \"2024-05-09T01:36:11.444871Z\"\r\n    }\r\n   },\r\n   \"id\": \"f103d5e7cc3146d9\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 852\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"Python 3\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 2\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython2\",\r\n   \"version\": \"2.7.6\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 5\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model.ipynb b/model.ipynb
--- a/model.ipynb	(revision a0f129406283265cf5d1316552e5be127c198cae)
+++ b/model.ipynb	(date 1715227141158)
@@ -6,8 +6,8 @@
    "metadata": {
     "collapsed": true,
     "ExecuteTime": {
-     "end_time": "2024-05-09T01:33:11.013888Z",
-     "start_time": "2024-05-09T01:33:11.006413Z"
+     "end_time": "2024-05-09T02:30:39.222832Z",
+     "start_time": "2024-05-09T02:30:39.219715Z"
     }
    },
    "source": [
@@ -24,7 +24,7 @@
     "from sklearn.model_selection import train_test_split"
    ],
    "outputs": [],
-   "execution_count": 845
+   "execution_count": 60
   },
   {
    "cell_type": "markdown",
@@ -48,23 +48,82 @@
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "end_time": "2024-05-09T01:33:11.062489Z",
-     "start_time": "2024-05-09T01:33:11.010337Z"
+     "end_time": "2024-05-09T02:30:39.339200Z",
+     "start_time": "2024-05-09T02:30:39.264979Z"
     }
    },
    "id": "9934f095638f49f4",
    "outputs": [
     {
      "data": {
-      "text/plain": "                                                Word Language\n24443  doors and were in the car speeding toward the  English\n13609                    questi li ha in custodia un  Italian\n43979        jeg henter mine udtryk fra mine daglige   Danish\n33611                   εσύ θα τα βρεις με την έστερ    Greek\n44954              nå gør han det? sagde ravn gnaven   Danish",
-      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Word</th>\n      <th>Language</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>24443</th>\n      <td>doors and were in the car speeding toward the</td>\n      <td>English</td>\n    </tr>\n    <tr>\n      <th>13609</th>\n      <td>questi li ha in custodia un</td>\n      <td>Italian</td>\n    </tr>\n    <tr>\n      <th>43979</th>\n      <td>jeg henter mine udtryk fra mine daglige</td>\n      <td>Danish</td>\n    </tr>\n    <tr>\n      <th>33611</th>\n      <td>εσύ θα τα βρεις με την έστερ</td>\n      <td>Greek</td>\n    </tr>\n    <tr>\n      <th>44954</th>\n      <td>nå gør han det? sagde ravn gnaven</td>\n      <td>Danish</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
+      "text/plain": [
+       "                                                Word Language\n",
+       "24443  doors and were in the car speeding toward the  English\n",
+       "13609                    questi li ha in custodia un  Italian\n",
+       "43979        jeg henter mine udtryk fra mine daglige   Danish\n",
+       "33611                   εσύ θα τα βρεις με την έστερ    Greek\n",
+       "44954              nå gør han det? sagde ravn gnaven   Danish"
+      ],
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>Word</th>\n",
+       "      <th>Language</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>24443</th>\n",
+       "      <td>doors and were in the car speeding toward the</td>\n",
+       "      <td>English</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>13609</th>\n",
+       "      <td>questi li ha in custodia un</td>\n",
+       "      <td>Italian</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>43979</th>\n",
+       "      <td>jeg henter mine udtryk fra mine daglige</td>\n",
+       "      <td>Danish</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>33611</th>\n",
+       "      <td>εσύ θα τα βρεις με την έστερ</td>\n",
+       "      <td>Greek</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>44954</th>\n",
+       "      <td>nå gør han det? sagde ravn gnaven</td>\n",
+       "      <td>Danish</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ]
      },
-     "execution_count": 846,
+     "execution_count": 61,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
-   "execution_count": 846
+   "execution_count": 61
   },
   {
    "cell_type": "markdown",
@@ -106,8 +165,8 @@
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "end_time": "2024-05-09T01:33:11.673510Z",
-     "start_time": "2024-05-09T01:33:11.065738Z"
+     "end_time": "2024-05-09T02:30:40.168940Z",
+     "start_time": "2024-05-09T02:30:39.340199Z"
     }
    },
    "id": "ba4d86402045de27",
@@ -121,20 +180,18 @@
      ]
     }
    ],
-   "execution_count": 847
+   "execution_count": 62
   },
   {
    "cell_type": "code",
    "source": [
     "model = Sequential()\n",
     "model.add(Conv1D(input_dim, 13, activation='relu'))  # Convolutional layer\n",
-    "tf.keras.layers.SimpleRNN(10, activation='relu'),\n",
-    "tf.keras.layers.SimpleRNN(64, activation='relu'),\n",
+    "tf.keras.layers.SimpleRNN(128, activation='relu'),\n",
+    "tf.keras.layers.SimpleRNN(512, activation='relu'),\n",
     "model.add(LSTM(64, return_sequences=True))\n",
     "model.add(GlobalMaxPooling1D())  # Pooling layer\n",
     "model.add(Dense(64, activation='relu'))  # Dense layer\n",
-    "model.add(Dense(64, activation='relu'))  # Dense layer\n",
-    "model.add(Dense(64, activation='relu'))  # Dense layer\n",
     "model.add(Dropout(0.6))\n",
     "model.add(Dense(len(y[1]), activation='softmax'))\n",
     "adam = optimizers.Adam(learning_rate=0.001)\n",
@@ -143,24 +200,22 @@
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "end_time": "2024-05-09T01:33:11.686967Z",
-     "start_time": "2024-05-09T01:33:11.676686Z"
+     "end_time": "2024-05-09T02:39:04.450915Z",
+     "start_time": "2024-05-09T02:39:04.427610Z"
     }
    },
    "id": "c870f2fa48fe956c",
    "outputs": [],
-   "execution_count": 848
+   "execution_count": 68
   },
   {
    "cell_type": "code",
-   "source": [
-    "history = model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=20, batch_size=512,verbose=1)"
-   ],
+   "source": "history = model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=50, batch_size=1024,verbose=1)",
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "end_time": "2024-05-09T01:36:11.127173Z",
-     "start_time": "2024-05-09T01:33:11.688716Z"
+     "end_time": "2024-05-09T02:43:15.389966Z",
+     "start_time": "2024-05-09T02:39:05.097091Z"
     }
    },
    "id": "d9a29cb1ff2dcba7",
@@ -169,50 +224,110 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Epoch 1/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m10s\u001B[0m 97ms/step - accuracy: 0.2768 - categorical_crossentropy: 2.2918 - loss: 2.2918 - val_accuracy: 0.4592 - val_categorical_crossentropy: 1.7266 - val_loss: 1.7266\n",
-      "Epoch 2/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m9s\u001B[0m 97ms/step - accuracy: 0.4446 - categorical_crossentropy: 1.7725 - loss: 1.7725 - val_accuracy: 0.4870 - val_categorical_crossentropy: 1.6033 - val_loss: 1.6033\n",
-      "Epoch 3/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m9s\u001B[0m 95ms/step - accuracy: 0.4698 - categorical_crossentropy: 1.6738 - loss: 1.6738 - val_accuracy: 0.4874 - val_categorical_crossentropy: 1.5687 - val_loss: 1.5687\n",
-      "Epoch 4/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m9s\u001B[0m 91ms/step - accuracy: 0.4802 - categorical_crossentropy: 1.6108 - loss: 1.6108 - val_accuracy: 0.4938 - val_categorical_crossentropy: 1.5277 - val_loss: 1.5277\n",
-      "Epoch 5/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m9s\u001B[0m 91ms/step - accuracy: 0.4961 - categorical_crossentropy: 1.5615 - loss: 1.5615 - val_accuracy: 0.5183 - val_categorical_crossentropy: 1.4662 - val_loss: 1.4662\n",
-      "Epoch 6/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m9s\u001B[0m 91ms/step - accuracy: 0.5052 - categorical_crossentropy: 1.5175 - loss: 1.5175 - val_accuracy: 0.5272 - val_categorical_crossentropy: 1.4480 - val_loss: 1.4480\n",
-      "Epoch 7/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m9s\u001B[0m 98ms/step - accuracy: 0.5185 - categorical_crossentropy: 1.4888 - loss: 1.4888 - val_accuracy: 0.5444 - val_categorical_crossentropy: 1.3891 - val_loss: 1.3891\n",
-      "Epoch 8/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m9s\u001B[0m 98ms/step - accuracy: 0.5309 - categorical_crossentropy: 1.4400 - loss: 1.4400 - val_accuracy: 0.5405 - val_categorical_crossentropy: 1.3972 - val_loss: 1.3972\n",
-      "Epoch 9/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m9s\u001B[0m 96ms/step - accuracy: 0.5389 - categorical_crossentropy: 1.4189 - loss: 1.4189 - val_accuracy: 0.5581 - val_categorical_crossentropy: 1.3439 - val_loss: 1.3439\n",
-      "Epoch 10/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m9s\u001B[0m 92ms/step - accuracy: 0.5479 - categorical_crossentropy: 1.3826 - loss: 1.3826 - val_accuracy: 0.5680 - val_categorical_crossentropy: 1.3140 - val_loss: 1.3140\n",
-      "Epoch 11/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m9s\u001B[0m 92ms/step - accuracy: 0.5622 - categorical_crossentropy: 1.3498 - loss: 1.3498 - val_accuracy: 0.5676 - val_categorical_crossentropy: 1.3006 - val_loss: 1.3006\n",
-      "Epoch 12/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m9s\u001B[0m 93ms/step - accuracy: 0.5688 - categorical_crossentropy: 1.3188 - loss: 1.3188 - val_accuracy: 0.5730 - val_categorical_crossentropy: 1.3257 - val_loss: 1.3257\n",
-      "Epoch 13/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m9s\u001B[0m 93ms/step - accuracy: 0.5741 - categorical_crossentropy: 1.2955 - loss: 1.2955 - val_accuracy: 0.5937 - val_categorical_crossentropy: 1.2287 - val_loss: 1.2287\n",
-      "Epoch 14/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m9s\u001B[0m 96ms/step - accuracy: 0.5847 - categorical_crossentropy: 1.2673 - loss: 1.2673 - val_accuracy: 0.6000 - val_categorical_crossentropy: 1.2121 - val_loss: 1.2121\n",
-      "Epoch 15/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m10s\u001B[0m 103ms/step - accuracy: 0.5934 - categorical_crossentropy: 1.2284 - loss: 1.2284 - val_accuracy: 0.6042 - val_categorical_crossentropy: 1.1981 - val_loss: 1.1981\n",
-      "Epoch 16/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m9s\u001B[0m 99ms/step - accuracy: 0.5961 - categorical_crossentropy: 1.2228 - loss: 1.2228 - val_accuracy: 0.5962 - val_categorical_crossentropy: 1.2037 - val_loss: 1.2037\n",
-      "Epoch 17/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m9s\u001B[0m 93ms/step - accuracy: 0.5975 - categorical_crossentropy: 1.2115 - loss: 1.2115 - val_accuracy: 0.6081 - val_categorical_crossentropy: 1.1704 - val_loss: 1.1704\n",
-      "Epoch 18/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m9s\u001B[0m 93ms/step - accuracy: 0.6075 - categorical_crossentropy: 1.1851 - loss: 1.1851 - val_accuracy: 0.6171 - val_categorical_crossentropy: 1.1453 - val_loss: 1.1453\n",
-      "Epoch 19/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m9s\u001B[0m 97ms/step - accuracy: 0.6160 - categorical_crossentropy: 1.1576 - loss: 1.1576 - val_accuracy: 0.6188 - val_categorical_crossentropy: 1.1392 - val_loss: 1.1392\n",
-      "Epoch 20/20\n",
-      "\u001B[1m94/94\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m9s\u001B[0m 93ms/step - accuracy: 0.6216 - categorical_crossentropy: 1.1443 - loss: 1.1443 - val_accuracy: 0.6257 - val_categorical_crossentropy: 1.1028 - val_loss: 1.1028\n"
+      "Epoch 1/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m8s\u001B[0m 117ms/step - accuracy: 0.1736 - categorical_crossentropy: 2.4558 - loss: 2.4558 - val_accuracy: 0.3697 - val_categorical_crossentropy: 1.9338 - val_loss: 1.9338\n",
+      "Epoch 2/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 103ms/step - accuracy: 0.3579 - categorical_crossentropy: 2.0056 - loss: 2.0056 - val_accuracy: 0.4423 - val_categorical_crossentropy: 1.7721 - val_loss: 1.7721\n",
+      "Epoch 3/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 102ms/step - accuracy: 0.4171 - categorical_crossentropy: 1.8526 - loss: 1.8526 - val_accuracy: 0.4668 - val_categorical_crossentropy: 1.6757 - val_loss: 1.6757\n",
+      "Epoch 4/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 102ms/step - accuracy: 0.4441 - categorical_crossentropy: 1.7622 - loss: 1.7622 - val_accuracy: 0.4823 - val_categorical_crossentropy: 1.6230 - val_loss: 1.6230\n",
+      "Epoch 5/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 101ms/step - accuracy: 0.4638 - categorical_crossentropy: 1.6948 - loss: 1.6948 - val_accuracy: 0.4840 - val_categorical_crossentropy: 1.5970 - val_loss: 1.5970\n",
+      "Epoch 6/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 108ms/step - accuracy: 0.4685 - categorical_crossentropy: 1.6723 - loss: 1.6723 - val_accuracy: 0.4959 - val_categorical_crossentropy: 1.5678 - val_loss: 1.5678\n",
+      "Epoch 7/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 106ms/step - accuracy: 0.4808 - categorical_crossentropy: 1.6286 - loss: 1.6286 - val_accuracy: 0.4978 - val_categorical_crossentropy: 1.5408 - val_loss: 1.5408\n",
+      "Epoch 8/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 109ms/step - accuracy: 0.4847 - categorical_crossentropy: 1.6125 - loss: 1.6125 - val_accuracy: 0.5031 - val_categorical_crossentropy: 1.5204 - val_loss: 1.5204\n",
+      "Epoch 9/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 109ms/step - accuracy: 0.4932 - categorical_crossentropy: 1.5766 - loss: 1.5766 - val_accuracy: 0.5047 - val_categorical_crossentropy: 1.5130 - val_loss: 1.5130\n",
+      "Epoch 10/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 108ms/step - accuracy: 0.4908 - categorical_crossentropy: 1.5812 - loss: 1.5812 - val_accuracy: 0.5101 - val_categorical_crossentropy: 1.4957 - val_loss: 1.4957\n",
+      "Epoch 11/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 107ms/step - accuracy: 0.4987 - categorical_crossentropy: 1.5475 - loss: 1.5475 - val_accuracy: 0.5161 - val_categorical_crossentropy: 1.4741 - val_loss: 1.4741\n",
+      "Epoch 12/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 112ms/step - accuracy: 0.5032 - categorical_crossentropy: 1.5296 - loss: 1.5296 - val_accuracy: 0.5175 - val_categorical_crossentropy: 1.4545 - val_loss: 1.4545\n",
+      "Epoch 13/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 109ms/step - accuracy: 0.5060 - categorical_crossentropy: 1.5186 - loss: 1.5186 - val_accuracy: 0.5259 - val_categorical_crossentropy: 1.4350 - val_loss: 1.4350\n",
+      "Epoch 14/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 109ms/step - accuracy: 0.5136 - categorical_crossentropy: 1.5052 - loss: 1.5052 - val_accuracy: 0.5251 - val_categorical_crossentropy: 1.4366 - val_loss: 1.4366\n",
+      "Epoch 15/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 108ms/step - accuracy: 0.5101 - categorical_crossentropy: 1.4985 - loss: 1.4985 - val_accuracy: 0.5313 - val_categorical_crossentropy: 1.4086 - val_loss: 1.4086\n",
+      "Epoch 16/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 107ms/step - accuracy: 0.5252 - categorical_crossentropy: 1.4674 - loss: 1.4674 - val_accuracy: 0.5324 - val_categorical_crossentropy: 1.4127 - val_loss: 1.4127\n",
+      "Epoch 17/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 106ms/step - accuracy: 0.5197 - categorical_crossentropy: 1.4664 - loss: 1.4664 - val_accuracy: 0.5478 - val_categorical_crossentropy: 1.3981 - val_loss: 1.3981\n",
+      "Epoch 18/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 106ms/step - accuracy: 0.5311 - categorical_crossentropy: 1.4423 - loss: 1.4423 - val_accuracy: 0.5531 - val_categorical_crossentropy: 1.3672 - val_loss: 1.3672\n",
+      "Epoch 19/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 112ms/step - accuracy: 0.5306 - categorical_crossentropy: 1.4357 - loss: 1.4357 - val_accuracy: 0.5540 - val_categorical_crossentropy: 1.3617 - val_loss: 1.3617\n",
+      "Epoch 20/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 107ms/step - accuracy: 0.5396 - categorical_crossentropy: 1.4147 - loss: 1.4147 - val_accuracy: 0.5575 - val_categorical_crossentropy: 1.3469 - val_loss: 1.3469\n",
+      "Epoch 21/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 107ms/step - accuracy: 0.5429 - categorical_crossentropy: 1.3991 - loss: 1.3991 - val_accuracy: 0.5528 - val_categorical_crossentropy: 1.3491 - val_loss: 1.3491\n",
+      "Epoch 22/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 107ms/step - accuracy: 0.5464 - categorical_crossentropy: 1.3956 - loss: 1.3956 - val_accuracy: 0.5566 - val_categorical_crossentropy: 1.3281 - val_loss: 1.3281\n",
+      "Epoch 23/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 108ms/step - accuracy: 0.5523 - categorical_crossentropy: 1.3790 - loss: 1.3790 - val_accuracy: 0.5652 - val_categorical_crossentropy: 1.3073 - val_loss: 1.3073\n",
+      "Epoch 24/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 109ms/step - accuracy: 0.5530 - categorical_crossentropy: 1.3705 - loss: 1.3705 - val_accuracy: 0.5709 - val_categorical_crossentropy: 1.2963 - val_loss: 1.2963\n",
+      "Epoch 25/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 107ms/step - accuracy: 0.5555 - categorical_crossentropy: 1.3535 - loss: 1.3535 - val_accuracy: 0.5658 - val_categorical_crossentropy: 1.2986 - val_loss: 1.2986\n",
+      "Epoch 26/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 107ms/step - accuracy: 0.5591 - categorical_crossentropy: 1.3470 - loss: 1.3470 - val_accuracy: 0.5753 - val_categorical_crossentropy: 1.2808 - val_loss: 1.2808\n",
+      "Epoch 27/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 103ms/step - accuracy: 0.5594 - categorical_crossentropy: 1.3497 - loss: 1.3497 - val_accuracy: 0.5777 - val_categorical_crossentropy: 1.2714 - val_loss: 1.2714\n",
+      "Epoch 28/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 103ms/step - accuracy: 0.5653 - categorical_crossentropy: 1.3259 - loss: 1.3259 - val_accuracy: 0.5757 - val_categorical_crossentropy: 1.2700 - val_loss: 1.2700\n",
+      "Epoch 29/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 106ms/step - accuracy: 0.5591 - categorical_crossentropy: 1.3435 - loss: 1.3435 - val_accuracy: 0.5818 - val_categorical_crossentropy: 1.2600 - val_loss: 1.2600\n",
+      "Epoch 30/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 106ms/step - accuracy: 0.5726 - categorical_crossentropy: 1.3113 - loss: 1.3113 - val_accuracy: 0.5780 - val_categorical_crossentropy: 1.2794 - val_loss: 1.2794\n",
+      "Epoch 31/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 104ms/step - accuracy: 0.5665 - categorical_crossentropy: 1.3132 - loss: 1.3132 - val_accuracy: 0.5834 - val_categorical_crossentropy: 1.2496 - val_loss: 1.2496\n",
+      "Epoch 32/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 102ms/step - accuracy: 0.5749 - categorical_crossentropy: 1.2975 - loss: 1.2975 - val_accuracy: 0.5895 - val_categorical_crossentropy: 1.2392 - val_loss: 1.2392\n",
+      "Epoch 33/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 106ms/step - accuracy: 0.5807 - categorical_crossentropy: 1.2831 - loss: 1.2831 - val_accuracy: 0.5873 - val_categorical_crossentropy: 1.2423 - val_loss: 1.2423\n",
+      "Epoch 34/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 102ms/step - accuracy: 0.5788 - categorical_crossentropy: 1.2811 - loss: 1.2811 - val_accuracy: 0.5956 - val_categorical_crossentropy: 1.2223 - val_loss: 1.2223\n",
+      "Epoch 35/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 102ms/step - accuracy: 0.5814 - categorical_crossentropy: 1.2680 - loss: 1.2680 - val_accuracy: 0.5958 - val_categorical_crossentropy: 1.2109 - val_loss: 1.2109\n",
+      "Epoch 36/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 103ms/step - accuracy: 0.5837 - categorical_crossentropy: 1.2630 - loss: 1.2630 - val_accuracy: 0.6019 - val_categorical_crossentropy: 1.2077 - val_loss: 1.2077\n",
+      "Epoch 37/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 102ms/step - accuracy: 0.5865 - categorical_crossentropy: 1.2594 - loss: 1.2594 - val_accuracy: 0.6042 - val_categorical_crossentropy: 1.2083 - val_loss: 1.2083\n",
+      "Epoch 38/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 102ms/step - accuracy: 0.5873 - categorical_crossentropy: 1.2467 - loss: 1.2467 - val_accuracy: 0.6031 - val_categorical_crossentropy: 1.2021 - val_loss: 1.2021\n",
+      "Epoch 39/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 104ms/step - accuracy: 0.5923 - categorical_crossentropy: 1.2391 - loss: 1.2391 - val_accuracy: 0.6094 - val_categorical_crossentropy: 1.1804 - val_loss: 1.1804\n",
+      "Epoch 40/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 104ms/step - accuracy: 0.5890 - categorical_crossentropy: 1.2428 - loss: 1.2428 - val_accuracy: 0.6044 - val_categorical_crossentropy: 1.1923 - val_loss: 1.1923\n",
+      "Epoch 41/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 102ms/step - accuracy: 0.5965 - categorical_crossentropy: 1.2296 - loss: 1.2296 - val_accuracy: 0.6080 - val_categorical_crossentropy: 1.1767 - val_loss: 1.1767\n",
+      "Epoch 42/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 102ms/step - accuracy: 0.5996 - categorical_crossentropy: 1.2166 - loss: 1.2166 - val_accuracy: 0.6158 - val_categorical_crossentropy: 1.1681 - val_loss: 1.1681\n",
+      "Epoch 43/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 102ms/step - accuracy: 0.6021 - categorical_crossentropy: 1.2078 - loss: 1.2078 - val_accuracy: 0.6186 - val_categorical_crossentropy: 1.1653 - val_loss: 1.1653\n",
+      "Epoch 44/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 102ms/step - accuracy: 0.6036 - categorical_crossentropy: 1.1930 - loss: 1.1930 - val_accuracy: 0.6089 - val_categorical_crossentropy: 1.1821 - val_loss: 1.1821\n",
+      "Epoch 45/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 102ms/step - accuracy: 0.6012 - categorical_crossentropy: 1.2095 - loss: 1.2095 - val_accuracy: 0.6199 - val_categorical_crossentropy: 1.1497 - val_loss: 1.1497\n",
+      "Epoch 46/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 106ms/step - accuracy: 0.6030 - categorical_crossentropy: 1.1982 - loss: 1.1982 - val_accuracy: 0.6114 - val_categorical_crossentropy: 1.1683 - val_loss: 1.1683\n",
+      "Epoch 47/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 102ms/step - accuracy: 0.6067 - categorical_crossentropy: 1.1951 - loss: 1.1951 - val_accuracy: 0.6090 - val_categorical_crossentropy: 1.1704 - val_loss: 1.1704\n",
+      "Epoch 48/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 102ms/step - accuracy: 0.6083 - categorical_crossentropy: 1.1814 - loss: 1.1814 - val_accuracy: 0.6179 - val_categorical_crossentropy: 1.1544 - val_loss: 1.1544\n",
+      "Epoch 49/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 102ms/step - accuracy: 0.6158 - categorical_crossentropy: 1.1672 - loss: 1.1672 - val_accuracy: 0.6191 - val_categorical_crossentropy: 1.1471 - val_loss: 1.1471\n",
+      "Epoch 50/50\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m5s\u001B[0m 105ms/step - accuracy: 0.6095 - categorical_crossentropy: 1.1685 - loss: 1.1685 - val_accuracy: 0.6190 - val_categorical_crossentropy: 1.1519 - val_loss: 1.1519\n"
      ]
     }
    ],
-   "execution_count": 849
+   "execution_count": 69
   },
   {
    "cell_type": "code",
@@ -228,30 +343,34 @@
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "end_time": "2024-05-09T01:36:11.285253Z",
-     "start_time": "2024-05-09T01:36:11.143797Z"
+     "end_time": "2024-05-09T02:43:15.611570Z",
+     "start_time": "2024-05-09T02:43:15.390966Z"
     }
    },
    "id": "db97a7f3cc91e456",
    "outputs": [
     {
      "data": {
-      "text/plain": "Text(0.5, 0, 'Epoch')"
+      "text/plain": [
+       "Text(0.5, 0, 'Epoch')"
+      ]
      },
-     "execution_count": 850,
+     "execution_count": 70,
      "metadata": {},
      "output_type": "execute_result"
     },
     {
      "data": {
-      "text/plain": "<Figure size 640x480 with 1 Axes>",
-      "image/png": ""
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ],
+      "image/png": ""
      },
      "metadata": {},
      "output_type": "display_data"
     }
    ],
-   "execution_count": 850
+   "execution_count": 70
   },
   {
    "cell_type": "markdown",
@@ -266,7 +385,7 @@
   {
    "cell_type": "code",
    "source": [
-    "prediction_word = \"också en kvinna\"\n",
+    "prediction_word = \"que me dices hoy lo que no\"\n",
     "prediction_word = tokenizer.texts_to_sequences([prediction_word])\n",
     "prediction_word = pad_sequences(prediction_word, maxlen=input_dim)\n",
     "prediction = model.predict([prediction_word])\n",
@@ -283,8 +402,8 @@
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "end_time": "2024-05-09T01:36:11.452034Z",
-     "start_time": "2024-05-09T01:36:11.288297Z"
+     "end_time": "2024-05-09T02:34:45.998692Z",
+     "start_time": "2024-05-09T02:34:45.789218Z"
     }
    },
    "id": "2af1ef5d86413ee6",
@@ -293,24 +412,24 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "\u001B[1m1/1\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m0s\u001B[0m 106ms/step\n",
-      "Danish - 39.9%\n",
-      "Dutch - 3.4%\n",
-      "English - 9.8%\n",
-      "French - 0.7%\n",
-      "German - 3.7%\n",
+      "\u001B[1m1/1\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m0s\u001B[0m 153ms/step\n",
+      "Danish - 0.9%\n",
+      "Dutch - 0.3%\n",
+      "English - 2.2%\n",
+      "French - 27.0%\n",
+      "German - 0.5%\n",
       "Greek - 0.0%\n",
-      "Italian - 0.6%\n",
-      "Norwegian - 27.0%\n",
-      "Polish - 1.0%\n",
-      "Portuguese - 0.3%\n",
+      "Italian - 3.8%\n",
+      "Norwegian - 0.3%\n",
+      "Polish - 0.3%\n",
+      "Portuguese - 15.0%\n",
       "Russian - 0.0%\n",
-      "Spanish - 2.5%\n",
-      "Swedish - 10.9%\n"
+      "Spanish - 49.4%\n",
+      "Swedish - 0.3%\n"
      ]
     }
    ],
-   "execution_count": 851
+   "execution_count": 66
   },
   {
    "cell_type": "code",
@@ -318,13 +437,26 @@
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "end_time": "2024-05-09T01:36:11.465457Z",
-     "start_time": "2024-05-09T01:36:11.444871Z"
+     "end_time": "2024-05-09T02:34:46.024932Z",
+     "start_time": "2024-05-09T02:34:45.999692Z"
     }
    },
    "id": "f103d5e7cc3146d9",
    "outputs": [],
-   "execution_count": 852
+   "execution_count": 67
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-05-09T02:34:46.028707Z",
+     "start_time": "2024-05-09T02:34:46.025933Z"
+    }
+   },
+   "cell_type": "code",
+   "source": "",
+   "id": "10be550cc0c5da39",
+   "outputs": [],
+   "execution_count": 67
   }
  ],
  "metadata": {
