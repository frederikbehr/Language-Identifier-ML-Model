Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"094c4da1-f913-4ead-956e-504ebdebe075\" name=\"Changes\" comment=\"finished the scraper that gets the words, and started on making the model.ipynb\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/model.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/model.ipynb\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n        <option value=\"Jupyter Notebook\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;frederikbehr&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/frederikbehr/bookScraper&quot;,\r\n    &quot;accountId&quot;: &quot;a1ceff9a-a22e-4d55-a18f-7f81ab8f7f44&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2g9HwADAHy1BqC4AImrpKuMe5Fd\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.sentence.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;/Users/frederikalexanderbehrens/PycharmProjects/languageLense/data/Swedish&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$/data/Swedish\" />\r\n      <recent name=\"$PROJECT_DIR$/data/Norwegian\" />\r\n      <recent name=\"$PROJECT_DIR$\" />\r\n      <recent name=\"$PROJECT_DIR$/data/Italian\" />\r\n      <recent name=\"$PROJECT_DIR$/data/Danish\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"languageLense\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-91d5c284f522-JavaScript-PY-241.15989.155\" />\r\n        <option value=\"bundled-python-sdk-babbdf50b680-7c6932dee5e4-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-241.15989.155\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"094c4da1-f913-4ead-956e-504ebdebe075\" name=\"Changes\" comment=\"\" />\r\n      <created>1715103109466</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1715103109466</updated>\r\n      <workItem from=\"1715103112886\" duration=\"552000\" />\r\n      <workItem from=\"1715103765254\" duration=\"18002000\" />\r\n      <workItem from=\"1715173808593\" duration=\"186000\" />\r\n      <workItem from=\"1715174027315\" duration=\"1229000\" />\r\n      <workItem from=\"1715175283405\" duration=\"4947000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"first commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715103171708</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715103171708</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"first commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715103241019</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715103241019</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"finished the scraper that gets the words, and started on making the model.ipynb\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715122448908</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715122448908</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"first commit\" />\r\n    <MESSAGE value=\"finished the scraper that gets the words, and started on making the model.ipynb\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"finished the scraper that gets the words, and started on making the model.ipynb\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/languageLense$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1715122050520\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/bookScraper$sentence.coverage\" NAME=\"sentence Coverage Results\" MODIFIED=\"1715181085655\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/bookScraper$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1715174462631\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 7ba3d95741bfa0a742b768c71d610814846aa795)
+++ b/.idea/workspace.xml	(date 1715214658407)
@@ -4,8 +4,7 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="094c4da1-f913-4ead-956e-504ebdebe075" name="Changes" comment="finished the scraper that gets the words, and started on making the model.ipynb">
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+    <list default="true" id="094c4da1-f913-4ead-956e-504ebdebe075" name="Changes" comment="model is saved. val_accuracy: 82.3%">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/model.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/model.ipynb" afterDir="false" />
     </list>
@@ -41,13 +40,16 @@
   &quot;associatedIndex&quot;: 2
 }</component>
   <component name="ProjectId" id="2g9HwADAHy1BqC4AImrpKuMe5Fd" />
-  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
+    <ConfirmationsSetting value="2" id="Add" />
+  </component>
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
   <component name="PropertiesComponent">{
   &quot;keyToString&quot;: {
+    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
     &quot;Python.main.executor&quot;: &quot;Run&quot;,
     &quot;Python.sentence.executor&quot;: &quot;Run&quot;,
     &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
@@ -117,7 +119,7 @@
       <workItem from="1715103765254" duration="18002000" />
       <workItem from="1715173808593" duration="186000" />
       <workItem from="1715174027315" duration="1229000" />
-      <workItem from="1715175283405" duration="4947000" />
+      <workItem from="1715175283405" duration="8324000" />
     </task>
     <task id="LOCAL-00001" summary="first commit">
       <option name="closed" value="true" />
@@ -143,16 +145,26 @@
       <option name="project" value="LOCAL" />
       <updated>1715122448908</updated>
     </task>
-    <option name="localTasksCounter" value="4" />
+    <task id="LOCAL-00004" summary="model is saved. val_accuracy: 82.3%">
+      <option name="closed" value="true" />
+      <created>1715190345153</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1715190345153</updated>
+    </task>
+    <option name="localTasksCounter" value="5" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
   </component>
   <component name="VcsManagerConfiguration">
+    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
     <MESSAGE value="first commit" />
     <MESSAGE value="finished the scraper that gets the words, and started on making the model.ipynb" />
-    <option name="LAST_COMMIT_MESSAGE" value="finished the scraper that gets the words, and started on making the model.ipynb" />
+    <MESSAGE value="model is saved. val_accuracy: 82.3%" />
+    <option name="LAST_COMMIT_MESSAGE" value="model is saved. val_accuracy: 82.3%" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/languageLense$main.coverage" NAME="main Coverage Results" MODIFIED="1715122050520" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
Index: model.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"id\": \"initial_id\",\r\n   \"metadata\": {\r\n    \"collapsed\": true,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-08T21:49:50.215225Z\",\r\n     \"start_time\": \"2024-05-08T21:49:50.206676Z\"\r\n    }\r\n   },\r\n   \"source\": [\r\n    \"import numpy as np\\n\",\r\n    \"import pandas as pd\\n\",\r\n    \"import matplotlib.pyplot as plt\\n\",\r\n    \"import seaborn as sns\\n\",\r\n    \"import tensorflow as tf\\n\",\r\n    \"from tensorflow.keras.models import Sequential\\n\",\r\n    \"from tensorflow.keras.layers import Dense, Embedding, Conv1D, GlobalMaxPooling1D\\n\",\r\n    \"from tensorflow.keras import optimizers\\n\",\r\n    \"from tensorflow.keras.preprocessing.text import Tokenizer\\n\",\r\n    \"from keras.src.utils import pad_sequences\\n\",\r\n    \"from sklearn.model_selection import train_test_split\"\r\n   ],\r\n   \"outputs\": [],\r\n   \"execution_count\": 361\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# Get data\\n\",\r\n    \"Pandas is used to get the data from the project directory.\\n\",\r\n    \"The data is a .csv file, that has been created by book texts and prepared to be listed in the file word-by-word.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   },\r\n   \"id\": \"b20ed3afab281b03\"\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"df = pd.read_csv('dataset.csv')\\n\",\r\n    \"df = df.sample(frac=1.0, random_state=42)\\n\",\r\n    \"df.head()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-08T21:49:50.338735Z\",\r\n     \"start_time\": \"2024-05-08T21:49:50.210756Z\"\r\n    }\r\n   },\r\n   \"id\": \"9934f095638f49f4\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"                                                    Word Language\\n32774                          и сих великих дел орудьем  Russian\\n63660                                             πέτρες    Greek\\n89673                                     principer sagt   Danish\\n34240  essa si ritrasse ostile e gli rivolse un’occhi...  Italian\\n21729  um über das unmittelbare beobachtungsgebiet hi...   German\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>Word</th>\\n      <th>Language</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>32774</th>\\n      <td>и сих великих дел орудьем</td>\\n      <td>Russian</td>\\n    </tr>\\n    <tr>\\n      <th>63660</th>\\n      <td>πέτρες</td>\\n      <td>Greek</td>\\n    </tr>\\n    <tr>\\n      <th>89673</th>\\n      <td>principer sagt</td>\\n      <td>Danish</td>\\n    </tr>\\n    <tr>\\n      <th>34240</th>\\n      <td>essa si ritrasse ostile e gli rivolse un’occhi...</td>\\n      <td>Italian</td>\\n    </tr>\\n    <tr>\\n      <th>21729</th>\\n      <td>um über das unmittelbare beobachtungsgebiet hi...</td>\\n      <td>German</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 362,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 362\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# Prepare data\\n\",\r\n    \"Divide the data into X and y. X is input and y is the desired output.\\n\",\r\n    \"One-Hot Encode it, so the language is categorical. This is done with Pandas.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   },\r\n   \"id\": \"e375f9241e794ae4\"\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Getting X - the input values\\n\",\r\n    \"X = df.iloc[:, :-1]\\n\",\r\n    \"X.loc[:, 'Word'] = X['Word'].astype(str)\\n\",\r\n    \"tokenizer = Tokenizer(char_level=True) # Used for turning the words into numbers\\n\",\r\n    \"tokenizer.fit_on_texts(X['Word'].tolist()) # Giving Tokenizer the data it needs to learn how to encode the words\\n\",\r\n    \"X_sequences = tokenizer.texts_to_sequences(X['Word'].tolist()) # Now the words are encoded into sequences\\n\",\r\n    \"input_dim = max(len(seq) for seq in X_sequences)\\n\",\r\n    \"X = pad_sequences(\\n\",\r\n    \"    X_sequences, \\n\",\r\n    \"    maxlen=input_dim, \\n\",\r\n    \"    padding='post'\\n\",\r\n    \") # Making all input values be of same length\\n\",\r\n    \"print(f\\\"Rows: {len(X)}\\\")\\n\",\r\n    \"\\n\",\r\n    \"# Getting y - the output values\\n\",\r\n    \"y_pre_training = df.iloc[:, -1:]\\n\",\r\n    \"y = pd.get_dummies(y_pre_training).values\\n\",\r\n    \"print(f\\\"Amount of languages to identify: {len(y[1])}\\\")\\n\",\r\n    \"\\n\",\r\n    \"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\\n\",\r\n    \"X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-08T21:49:52.339531Z\",\r\n     \"start_time\": \"2024-05-08T21:49:50.348750Z\"\r\n    }\r\n   },\r\n   \"id\": \"ba4d86402045de27\",\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Rows: 129807\\n\",\r\n      \"Amount of languages to identify: 13\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"execution_count\": 363\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"model = Sequential()\\n\",\r\n    \"model.add(Conv1D(128, 6, activation='relu'))  # Convolutional layer\\n\",\r\n    \"model.add(GlobalMaxPooling1D())  # Pooling layer\\n\",\r\n    \"model.add(Dense(128, activation='relu'))  # Dense layer\\n\",\r\n    \"model.add(Dense(128, activation='relu'))  # Dense layer\\n\",\r\n    \"model.add(Dense(128, activation='relu'))  # Dense layer\\n\",\r\n    \"model.add(Dense(len(y[1]), activation='softmax'))\\n\",\r\n    \"adam = optimizers.Adam(learning_rate=0.001)\\n\",\r\n    \"model.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy', 'categorical_crossentropy'])\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-08T21:49:52.348083Z\",\r\n     \"start_time\": \"2024-05-08T21:49:52.343925Z\"\r\n    }\r\n   },\r\n   \"id\": \"c870f2fa48fe956c\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 364\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"history = model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=128, batch_size=512,verbose=1)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-08T21:51:43.100780Z\",\r\n     \"start_time\": \"2024-05-08T21:49:52.349687Z\"\r\n    }\r\n   },\r\n   \"id\": \"d9a29cb1ff2dcba7\",\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Epoch 1/128\\n\",\r\n      \"\\u001B[1m203/203\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m23s\\u001B[0m 110ms/step - accuracy: 0.3163 - categorical_crossentropy: 2.0931 - loss: 2.0931 - val_accuracy: 0.4530 - val_categorical_crossentropy: 1.6263 - val_loss: 1.6263\\n\",\r\n      \"Epoch 2/128\\n\",\r\n      \"\\u001B[1m203/203\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m21s\\u001B[0m 103ms/step - accuracy: 0.4638 - categorical_crossentropy: 1.5951 - loss: 1.5951 - val_accuracy: 0.4925 - val_categorical_crossentropy: 1.5218 - val_loss: 1.5218\\n\",\r\n      \"Epoch 3/128\\n\",\r\n      \"\\u001B[1m203/203\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m21s\\u001B[0m 103ms/step - accuracy: 0.5060 - categorical_crossentropy: 1.4841 - loss: 1.4841 - val_accuracy: 0.5260 - val_categorical_crossentropy: 1.4220 - val_loss: 1.4220\\n\",\r\n      \"Epoch 4/128\\n\",\r\n      \"\\u001B[1m203/203\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m22s\\u001B[0m 110ms/step - accuracy: 0.5344 - categorical_crossentropy: 1.4027 - loss: 1.4027 - val_accuracy: 0.5548 - val_categorical_crossentropy: 1.3626 - val_loss: 1.3626\\n\",\r\n      \"Epoch 5/128\\n\",\r\n      \"\\u001B[1m203/203\\u001B[0m \\u001B[32m━━━━━━━━━━━━━━━━━━━━\\u001B[0m\\u001B[37m\\u001B[0m \\u001B[1m21s\\u001B[0m 105ms/step - accuracy: 0.5573 - categorical_crossentropy: 1.3422 - loss: 1.3422 - val_accuracy: 0.5616 - val_categorical_crossentropy: 1.3358 - val_loss: 1.3358\\n\",\r\n      \"Epoch 6/128\\n\",\r\n      \"\\u001B[1m 20/203\\u001B[0m \\u001B[32m━\\u001B[0m\\u001B[37m━━━━━━━━━━━━━━━━━━━\\u001B[0m \\u001B[1m18s\\u001B[0m 99ms/step - accuracy: 0.5690 - categorical_crossentropy: 1.3099 - loss: 1.3099\"\r\n     ]\r\n    },\r\n    {\r\n     \"ename\": \"KeyboardInterrupt\",\r\n     \"evalue\": \"\",\r\n     \"output_type\": \"error\",\r\n     \"traceback\": [\r\n      \"\\u001B[0;31m---------------------------------------------------------------------------\\u001B[0m\",\r\n      \"\\u001B[0;31mKeyboardInterrupt\\u001B[0m                         Traceback (most recent call last)\",\r\n      \"Cell \\u001B[0;32mIn[365], line 1\\u001B[0m\\n\\u001B[0;32m----> 1\\u001B[0m history \\u001B[38;5;241m=\\u001B[39m \\u001B[43mmodel\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mfit\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[43mX_train\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43my_train\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43mvalidation_data\\u001B[49m\\u001B[38;5;241;43m=\\u001B[39;49m\\u001B[43m(\\u001B[49m\\u001B[43mX_val\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43my_val\\u001B[49m\\u001B[43m)\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43mepochs\\u001B[49m\\u001B[38;5;241;43m=\\u001B[39;49m\\u001B[38;5;241;43m128\\u001B[39;49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43mbatch_size\\u001B[49m\\u001B[38;5;241;43m=\\u001B[39;49m\\u001B[38;5;241;43m512\\u001B[39;49m\\u001B[43m,\\u001B[49m\\u001B[43mverbose\\u001B[49m\\u001B[38;5;241;43m=\\u001B[39;49m\\u001B[38;5;241;43m1\\u001B[39;49m\\u001B[43m)\\u001B[49m\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/keras/src/utils/traceback_utils.py:117\\u001B[0m, in \\u001B[0;36mfilter_traceback.<locals>.error_handler\\u001B[0;34m(*args, **kwargs)\\u001B[0m\\n\\u001B[1;32m    115\\u001B[0m filtered_tb \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;28;01mNone\\u001B[39;00m\\n\\u001B[1;32m    116\\u001B[0m \\u001B[38;5;28;01mtry\\u001B[39;00m:\\n\\u001B[0;32m--> 117\\u001B[0m     \\u001B[38;5;28;01mreturn\\u001B[39;00m \\u001B[43mfn\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[43margs\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[43mkwargs\\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m    118\\u001B[0m \\u001B[38;5;28;01mexcept\\u001B[39;00m \\u001B[38;5;167;01mException\\u001B[39;00m \\u001B[38;5;28;01mas\\u001B[39;00m e:\\n\\u001B[1;32m    119\\u001B[0m     filtered_tb \\u001B[38;5;241m=\\u001B[39m _process_traceback_frames(e\\u001B[38;5;241m.\\u001B[39m__traceback__)\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/keras/src/backend/tensorflow/trainer.py:314\\u001B[0m, in \\u001B[0;36mTensorFlowTrainer.fit\\u001B[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq)\\u001B[0m\\n\\u001B[1;32m    312\\u001B[0m \\u001B[38;5;28;01mfor\\u001B[39;00m step, iterator \\u001B[38;5;129;01min\\u001B[39;00m epoch_iterator\\u001B[38;5;241m.\\u001B[39menumerate_epoch():\\n\\u001B[1;32m    313\\u001B[0m     callbacks\\u001B[38;5;241m.\\u001B[39mon_train_batch_begin(step)\\n\\u001B[0;32m--> 314\\u001B[0m     logs \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;28;43mself\\u001B[39;49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mtrain_function\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[43miterator\\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m    315\\u001B[0m     logs \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39m_pythonify_logs(logs)\\n\\u001B[1;32m    316\\u001B[0m     callbacks\\u001B[38;5;241m.\\u001B[39mon_train_batch_end(step, logs)\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/util/traceback_utils.py:150\\u001B[0m, in \\u001B[0;36mfilter_traceback.<locals>.error_handler\\u001B[0;34m(*args, **kwargs)\\u001B[0m\\n\\u001B[1;32m    148\\u001B[0m filtered_tb \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;28;01mNone\\u001B[39;00m\\n\\u001B[1;32m    149\\u001B[0m \\u001B[38;5;28;01mtry\\u001B[39;00m:\\n\\u001B[0;32m--> 150\\u001B[0m   \\u001B[38;5;28;01mreturn\\u001B[39;00m \\u001B[43mfn\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[43margs\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[43mkwargs\\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m    151\\u001B[0m \\u001B[38;5;28;01mexcept\\u001B[39;00m \\u001B[38;5;167;01mException\\u001B[39;00m \\u001B[38;5;28;01mas\\u001B[39;00m e:\\n\\u001B[1;32m    152\\u001B[0m   filtered_tb \\u001B[38;5;241m=\\u001B[39m _process_traceback_frames(e\\u001B[38;5;241m.\\u001B[39m__traceback__)\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:833\\u001B[0m, in \\u001B[0;36mFunction.__call__\\u001B[0;34m(self, *args, **kwds)\\u001B[0m\\n\\u001B[1;32m    830\\u001B[0m compiler \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;124m\\\"\\u001B[39m\\u001B[38;5;124mxla\\u001B[39m\\u001B[38;5;124m\\\"\\u001B[39m \\u001B[38;5;28;01mif\\u001B[39;00m \\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39m_jit_compile \\u001B[38;5;28;01melse\\u001B[39;00m \\u001B[38;5;124m\\\"\\u001B[39m\\u001B[38;5;124mnonXla\\u001B[39m\\u001B[38;5;124m\\\"\\u001B[39m\\n\\u001B[1;32m    832\\u001B[0m \\u001B[38;5;28;01mwith\\u001B[39;00m OptionalXlaContext(\\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39m_jit_compile):\\n\\u001B[0;32m--> 833\\u001B[0m   result \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;28;43mself\\u001B[39;49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43m_call\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[43margs\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[43mkwds\\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m    835\\u001B[0m new_tracing_count \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39mexperimental_get_tracing_count()\\n\\u001B[1;32m    836\\u001B[0m without_tracing \\u001B[38;5;241m=\\u001B[39m (tracing_count \\u001B[38;5;241m==\\u001B[39m new_tracing_count)\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:878\\u001B[0m, in \\u001B[0;36mFunction._call\\u001B[0;34m(self, *args, **kwds)\\u001B[0m\\n\\u001B[1;32m    875\\u001B[0m \\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39m_lock\\u001B[38;5;241m.\\u001B[39mrelease()\\n\\u001B[1;32m    876\\u001B[0m \\u001B[38;5;66;03m# In this case we have not created variables on the first call. So we can\\u001B[39;00m\\n\\u001B[1;32m    877\\u001B[0m \\u001B[38;5;66;03m# run the first trace but we should fail if variables are created.\\u001B[39;00m\\n\\u001B[0;32m--> 878\\u001B[0m results \\u001B[38;5;241m=\\u001B[39m \\u001B[43mtracing_compilation\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mcall_function\\u001B[49m\\u001B[43m(\\u001B[49m\\n\\u001B[1;32m    879\\u001B[0m \\u001B[43m    \\u001B[49m\\u001B[43margs\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43mkwds\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[38;5;28;43mself\\u001B[39;49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43m_variable_creation_config\\u001B[49m\\n\\u001B[1;32m    880\\u001B[0m \\u001B[43m\\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m    881\\u001B[0m \\u001B[38;5;28;01mif\\u001B[39;00m \\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39m_created_variables:\\n\\u001B[1;32m    882\\u001B[0m   \\u001B[38;5;28;01mraise\\u001B[39;00m \\u001B[38;5;167;01mValueError\\u001B[39;00m(\\u001B[38;5;124m\\\"\\u001B[39m\\u001B[38;5;124mCreating variables on a non-first call to a function\\u001B[39m\\u001B[38;5;124m\\\"\\u001B[39m\\n\\u001B[1;32m    883\\u001B[0m                    \\u001B[38;5;124m\\\"\\u001B[39m\\u001B[38;5;124m decorated with tf.function.\\u001B[39m\\u001B[38;5;124m\\\"\\u001B[39m)\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py:139\\u001B[0m, in \\u001B[0;36mcall_function\\u001B[0;34m(args, kwargs, tracing_options)\\u001B[0m\\n\\u001B[1;32m    137\\u001B[0m bound_args \\u001B[38;5;241m=\\u001B[39m function\\u001B[38;5;241m.\\u001B[39mfunction_type\\u001B[38;5;241m.\\u001B[39mbind(\\u001B[38;5;241m*\\u001B[39margs, \\u001B[38;5;241m*\\u001B[39m\\u001B[38;5;241m*\\u001B[39mkwargs)\\n\\u001B[1;32m    138\\u001B[0m flat_inputs \\u001B[38;5;241m=\\u001B[39m function\\u001B[38;5;241m.\\u001B[39mfunction_type\\u001B[38;5;241m.\\u001B[39munpack_inputs(bound_args)\\n\\u001B[0;32m--> 139\\u001B[0m \\u001B[38;5;28;01mreturn\\u001B[39;00m \\u001B[43mfunction\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43m_call_flat\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[43m  \\u001B[49m\\u001B[38;5;66;43;03m# pylint: disable=protected-access\\u001B[39;49;00m\\n\\u001B[1;32m    140\\u001B[0m \\u001B[43m    \\u001B[49m\\u001B[43mflat_inputs\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43mcaptured_inputs\\u001B[49m\\u001B[38;5;241;43m=\\u001B[39;49m\\u001B[43mfunction\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mcaptured_inputs\\u001B[49m\\n\\u001B[1;32m    141\\u001B[0m \\u001B[43m\\u001B[49m\\u001B[43m)\\u001B[49m\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/concrete_function.py:1322\\u001B[0m, in \\u001B[0;36mConcreteFunction._call_flat\\u001B[0;34m(self, tensor_inputs, captured_inputs)\\u001B[0m\\n\\u001B[1;32m   1318\\u001B[0m possible_gradient_type \\u001B[38;5;241m=\\u001B[39m gradients_util\\u001B[38;5;241m.\\u001B[39mPossibleTapeGradientTypes(args)\\n\\u001B[1;32m   1319\\u001B[0m \\u001B[38;5;28;01mif\\u001B[39;00m (possible_gradient_type \\u001B[38;5;241m==\\u001B[39m gradients_util\\u001B[38;5;241m.\\u001B[39mPOSSIBLE_GRADIENT_TYPES_NONE\\n\\u001B[1;32m   1320\\u001B[0m     \\u001B[38;5;129;01mand\\u001B[39;00m executing_eagerly):\\n\\u001B[1;32m   1321\\u001B[0m   \\u001B[38;5;66;03m# No tape is watching; skip to running the function.\\u001B[39;00m\\n\\u001B[0;32m-> 1322\\u001B[0m   \\u001B[38;5;28;01mreturn\\u001B[39;00m \\u001B[38;5;28;43mself\\u001B[39;49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43m_inference_function\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mcall_preflattened\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[43margs\\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m   1323\\u001B[0m forward_backward \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39m_select_forward_and_backward_functions(\\n\\u001B[1;32m   1324\\u001B[0m     args,\\n\\u001B[1;32m   1325\\u001B[0m     possible_gradient_type,\\n\\u001B[1;32m   1326\\u001B[0m     executing_eagerly)\\n\\u001B[1;32m   1327\\u001B[0m forward_function, args_with_tangents \\u001B[38;5;241m=\\u001B[39m forward_backward\\u001B[38;5;241m.\\u001B[39mforward()\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py:216\\u001B[0m, in \\u001B[0;36mAtomicFunction.call_preflattened\\u001B[0;34m(self, args)\\u001B[0m\\n\\u001B[1;32m    214\\u001B[0m \\u001B[38;5;28;01mdef\\u001B[39;00m \\u001B[38;5;21mcall_preflattened\\u001B[39m(\\u001B[38;5;28mself\\u001B[39m, args: Sequence[core\\u001B[38;5;241m.\\u001B[39mTensor]) \\u001B[38;5;241m-\\u001B[39m\\u001B[38;5;241m>\\u001B[39m Any:\\n\\u001B[1;32m    215\\u001B[0m \\u001B[38;5;250m  \\u001B[39m\\u001B[38;5;124;03m\\\"\\\"\\\"Calls with flattened tensor inputs and returns the structured output.\\\"\\\"\\\"\\u001B[39;00m\\n\\u001B[0;32m--> 216\\u001B[0m   flat_outputs \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;28;43mself\\u001B[39;49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mcall_flat\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[43margs\\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m    217\\u001B[0m   \\u001B[38;5;28;01mreturn\\u001B[39;00m \\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39mfunction_type\\u001B[38;5;241m.\\u001B[39mpack_output(flat_outputs)\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py:251\\u001B[0m, in \\u001B[0;36mAtomicFunction.call_flat\\u001B[0;34m(self, *args)\\u001B[0m\\n\\u001B[1;32m    249\\u001B[0m \\u001B[38;5;28;01mwith\\u001B[39;00m record\\u001B[38;5;241m.\\u001B[39mstop_recording():\\n\\u001B[1;32m    250\\u001B[0m   \\u001B[38;5;28;01mif\\u001B[39;00m \\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39m_bound_context\\u001B[38;5;241m.\\u001B[39mexecuting_eagerly():\\n\\u001B[0;32m--> 251\\u001B[0m     outputs \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;28;43mself\\u001B[39;49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43m_bound_context\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mcall_function\\u001B[49m\\u001B[43m(\\u001B[49m\\n\\u001B[1;32m    252\\u001B[0m \\u001B[43m        \\u001B[49m\\u001B[38;5;28;43mself\\u001B[39;49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mname\\u001B[49m\\u001B[43m,\\u001B[49m\\n\\u001B[1;32m    253\\u001B[0m \\u001B[43m        \\u001B[49m\\u001B[38;5;28;43mlist\\u001B[39;49m\\u001B[43m(\\u001B[49m\\u001B[43margs\\u001B[49m\\u001B[43m)\\u001B[49m\\u001B[43m,\\u001B[49m\\n\\u001B[1;32m    254\\u001B[0m \\u001B[43m        \\u001B[49m\\u001B[38;5;28;43mlen\\u001B[39;49m\\u001B[43m(\\u001B[49m\\u001B[38;5;28;43mself\\u001B[39;49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mfunction_type\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mflat_outputs\\u001B[49m\\u001B[43m)\\u001B[49m\\u001B[43m,\\u001B[49m\\n\\u001B[1;32m    255\\u001B[0m \\u001B[43m    \\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m    256\\u001B[0m   \\u001B[38;5;28;01melse\\u001B[39;00m:\\n\\u001B[1;32m    257\\u001B[0m     outputs \\u001B[38;5;241m=\\u001B[39m make_call_op_in_graph(\\n\\u001B[1;32m    258\\u001B[0m         \\u001B[38;5;28mself\\u001B[39m,\\n\\u001B[1;32m    259\\u001B[0m         \\u001B[38;5;28mlist\\u001B[39m(args),\\n\\u001B[1;32m    260\\u001B[0m         \\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39m_bound_context\\u001B[38;5;241m.\\u001B[39mfunction_call_options\\u001B[38;5;241m.\\u001B[39mas_attrs(),\\n\\u001B[1;32m    261\\u001B[0m     )\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/context.py:1500\\u001B[0m, in \\u001B[0;36mContext.call_function\\u001B[0;34m(self, name, tensor_inputs, num_outputs)\\u001B[0m\\n\\u001B[1;32m   1498\\u001B[0m cancellation_context \\u001B[38;5;241m=\\u001B[39m cancellation\\u001B[38;5;241m.\\u001B[39mcontext()\\n\\u001B[1;32m   1499\\u001B[0m \\u001B[38;5;28;01mif\\u001B[39;00m cancellation_context \\u001B[38;5;129;01mis\\u001B[39;00m \\u001B[38;5;28;01mNone\\u001B[39;00m:\\n\\u001B[0;32m-> 1500\\u001B[0m   outputs \\u001B[38;5;241m=\\u001B[39m \\u001B[43mexecute\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mexecute\\u001B[49m\\u001B[43m(\\u001B[49m\\n\\u001B[1;32m   1501\\u001B[0m \\u001B[43m      \\u001B[49m\\u001B[43mname\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mdecode\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[38;5;124;43m\\\"\\u001B[39;49m\\u001B[38;5;124;43mutf-8\\u001B[39;49m\\u001B[38;5;124;43m\\\"\\u001B[39;49m\\u001B[43m)\\u001B[49m\\u001B[43m,\\u001B[49m\\n\\u001B[1;32m   1502\\u001B[0m \\u001B[43m      \\u001B[49m\\u001B[43mnum_outputs\\u001B[49m\\u001B[38;5;241;43m=\\u001B[39;49m\\u001B[43mnum_outputs\\u001B[49m\\u001B[43m,\\u001B[49m\\n\\u001B[1;32m   1503\\u001B[0m \\u001B[43m      \\u001B[49m\\u001B[43minputs\\u001B[49m\\u001B[38;5;241;43m=\\u001B[39;49m\\u001B[43mtensor_inputs\\u001B[49m\\u001B[43m,\\u001B[49m\\n\\u001B[1;32m   1504\\u001B[0m \\u001B[43m      \\u001B[49m\\u001B[43mattrs\\u001B[49m\\u001B[38;5;241;43m=\\u001B[39;49m\\u001B[43mattrs\\u001B[49m\\u001B[43m,\\u001B[49m\\n\\u001B[1;32m   1505\\u001B[0m \\u001B[43m      \\u001B[49m\\u001B[43mctx\\u001B[49m\\u001B[38;5;241;43m=\\u001B[39;49m\\u001B[38;5;28;43mself\\u001B[39;49m\\u001B[43m,\\u001B[49m\\n\\u001B[1;32m   1506\\u001B[0m \\u001B[43m  \\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m   1507\\u001B[0m \\u001B[38;5;28;01melse\\u001B[39;00m:\\n\\u001B[1;32m   1508\\u001B[0m   outputs \\u001B[38;5;241m=\\u001B[39m execute\\u001B[38;5;241m.\\u001B[39mexecute_with_cancellation(\\n\\u001B[1;32m   1509\\u001B[0m       name\\u001B[38;5;241m.\\u001B[39mdecode(\\u001B[38;5;124m\\\"\\u001B[39m\\u001B[38;5;124mutf-8\\u001B[39m\\u001B[38;5;124m\\\"\\u001B[39m),\\n\\u001B[1;32m   1510\\u001B[0m       num_outputs\\u001B[38;5;241m=\\u001B[39mnum_outputs,\\n\\u001B[0;32m   (...)\\u001B[0m\\n\\u001B[1;32m   1514\\u001B[0m       cancellation_manager\\u001B[38;5;241m=\\u001B[39mcancellation_context,\\n\\u001B[1;32m   1515\\u001B[0m   )\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/execute.py:53\\u001B[0m, in \\u001B[0;36mquick_execute\\u001B[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\\u001B[0m\\n\\u001B[1;32m     51\\u001B[0m \\u001B[38;5;28;01mtry\\u001B[39;00m:\\n\\u001B[1;32m     52\\u001B[0m   ctx\\u001B[38;5;241m.\\u001B[39mensure_initialized()\\n\\u001B[0;32m---> 53\\u001B[0m   tensors \\u001B[38;5;241m=\\u001B[39m \\u001B[43mpywrap_tfe\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mTFE_Py_Execute\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[43mctx\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43m_handle\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43mdevice_name\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43mop_name\\u001B[49m\\u001B[43m,\\u001B[49m\\n\\u001B[1;32m     54\\u001B[0m \\u001B[43m                                      \\u001B[49m\\u001B[43minputs\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43mattrs\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43mnum_outputs\\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m     55\\u001B[0m \\u001B[38;5;28;01mexcept\\u001B[39;00m core\\u001B[38;5;241m.\\u001B[39m_NotOkStatusException \\u001B[38;5;28;01mas\\u001B[39;00m e:\\n\\u001B[1;32m     56\\u001B[0m   \\u001B[38;5;28;01mif\\u001B[39;00m name \\u001B[38;5;129;01mis\\u001B[39;00m \\u001B[38;5;129;01mnot\\u001B[39;00m \\u001B[38;5;28;01mNone\\u001B[39;00m:\\n\",\r\n      \"\\u001B[0;31mKeyboardInterrupt\\u001B[0m: \"\r\n     ]\r\n    }\r\n   ],\r\n   \"execution_count\": 365\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"%matplotlib inline\\n\",\r\n    \"plt.plot(history.history['loss'])\\n\",\r\n    \"plt.plot(history.history['val_loss'])\\n\",\r\n    \"plt.title(\\\"Model's MSE\\\")\\n\",\r\n    \"plt.legend(['Train', 'Val'], loc='upper right')\\n\",\r\n    \"plt.ylabel('MSE')\\n\",\r\n    \"plt.xlabel('Epoch')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2024-05-08T21:51:43.100034Z\"\r\n    }\r\n   },\r\n   \"id\": \"db97a7f3cc91e456\",\r\n   \"outputs\": [],\r\n   \"execution_count\": null\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# Prediction\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   },\r\n   \"id\": \"4fb3930ce2fec85d\"\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"prediction_word = \\\"också en kvinna\\\"\\n\",\r\n    \"prediction_word = tokenizer.texts_to_sequences([prediction_word])\\n\",\r\n    \"prediction_word = pad_sequences(prediction_word, maxlen=input_dim)\\n\",\r\n    \"prediction = model.predict([prediction_word])\\n\",\r\n    \"output_probabilities = np.array(prediction)\\n\",\r\n    \"\\n\",\r\n    \"result = []\\n\",\r\n    \"class_labels = np.unique(y_pre_training)\\n\",\r\n    \"for index, prediction in enumerate(output_probabilities[0]):\\n\",\r\n    \"    result.append(f\\\"{class_labels[index]} - {round(prediction*100, 1)}%\\\")\\n\",\r\n    \"\\n\",\r\n    \"for r in result:\\n\",\r\n    \"    print(r)\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2024-05-08T21:51:43.101794Z\"\r\n    }\r\n   },\r\n   \"id\": \"2af1ef5d86413ee6\",\r\n   \"outputs\": [],\r\n   \"execution_count\": null\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"model.save('./model.keras')\",\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-08T21:51:43.104576Z\",\r\n     \"start_time\": \"2024-05-08T21:51:43.103285Z\"\r\n    }\r\n   },\r\n   \"id\": \"f103d5e7cc3146d9\",\r\n   \"outputs\": [],\r\n   \"execution_count\": null\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"Python 3\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 2\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython2\",\r\n   \"version\": \"2.7.6\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 5\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model.ipynb b/model.ipynb
--- a/model.ipynb	(revision 7ba3d95741bfa0a742b768c71d610814846aa795)
+++ b/model.ipynb	(date 1715213498591)
@@ -6,8 +6,8 @@
    "metadata": {
     "collapsed": true,
     "ExecuteTime": {
-     "end_time": "2024-05-08T21:49:50.215225Z",
-     "start_time": "2024-05-08T21:49:50.206676Z"
+     "end_time": "2024-05-08T21:53:26.266083Z",
+     "start_time": "2024-05-08T21:53:26.261834Z"
     }
    },
    "source": [
@@ -24,7 +24,7 @@
     "from sklearn.model_selection import train_test_split"
    ],
    "outputs": [],
-   "execution_count": 361
+   "execution_count": 30
   },
   {
    "cell_type": "markdown",
@@ -48,23 +48,82 @@
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "end_time": "2024-05-08T21:49:50.338735Z",
-     "start_time": "2024-05-08T21:49:50.210756Z"
+     "end_time": "2024-05-08T21:53:26.477917Z",
+     "start_time": "2024-05-08T21:53:26.298001Z"
     }
    },
    "id": "9934f095638f49f4",
    "outputs": [
     {
      "data": {
-      "text/plain": "                                                    Word Language\n32774                          и сих великих дел орудьем  Russian\n63660                                             πέτρες    Greek\n89673                                     principer sagt   Danish\n34240  essa si ritrasse ostile e gli rivolse un’occhi...  Italian\n21729  um über das unmittelbare beobachtungsgebiet hi...   German",
-      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Word</th>\n      <th>Language</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>32774</th>\n      <td>и сих великих дел орудьем</td>\n      <td>Russian</td>\n    </tr>\n    <tr>\n      <th>63660</th>\n      <td>πέτρες</td>\n      <td>Greek</td>\n    </tr>\n    <tr>\n      <th>89673</th>\n      <td>principer sagt</td>\n      <td>Danish</td>\n    </tr>\n    <tr>\n      <th>34240</th>\n      <td>essa si ritrasse ostile e gli rivolse un’occhi...</td>\n      <td>Italian</td>\n    </tr>\n    <tr>\n      <th>21729</th>\n      <td>um über das unmittelbare beobachtungsgebiet hi...</td>\n      <td>German</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
+      "text/plain": [
+       "                                                    Word Language\n",
+       "32774                          и сих великих дел орудьем  Russian\n",
+       "63660                                             πέτρες    Greek\n",
+       "89673                                     principer sagt   Danish\n",
+       "34240  essa si ritrasse ostile e gli rivolse un’occhi...  Italian\n",
+       "21729  um über das unmittelbare beobachtungsgebiet hi...   German"
+      ],
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>Word</th>\n",
+       "      <th>Language</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>32774</th>\n",
+       "      <td>и сих великих дел орудьем</td>\n",
+       "      <td>Russian</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>63660</th>\n",
+       "      <td>πέτρες</td>\n",
+       "      <td>Greek</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>89673</th>\n",
+       "      <td>principer sagt</td>\n",
+       "      <td>Danish</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>34240</th>\n",
+       "      <td>essa si ritrasse ostile e gli rivolse un’occhi...</td>\n",
+       "      <td>Italian</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>21729</th>\n",
+       "      <td>um über das unmittelbare beobachtungsgebiet hi...</td>\n",
+       "      <td>German</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ]
      },
-     "execution_count": 362,
+     "execution_count": 31,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
-   "execution_count": 362
+   "execution_count": 31
   },
   {
    "cell_type": "markdown",
@@ -106,8 +165,8 @@
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "end_time": "2024-05-08T21:49:52.339531Z",
-     "start_time": "2024-05-08T21:49:50.348750Z"
+     "end_time": "2024-05-08T21:53:29.485687Z",
+     "start_time": "2024-05-08T21:53:26.478917Z"
     }
    },
    "id": "ba4d86402045de27",
@@ -121,7 +180,7 @@
      ]
     }
    ],
-   "execution_count": 363
+   "execution_count": 32
   },
   {
    "cell_type": "code",
@@ -139,24 +198,22 @@
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "end_time": "2024-05-08T21:49:52.348083Z",
-     "start_time": "2024-05-08T21:49:52.343925Z"
+     "end_time": "2024-05-08T21:53:29.499704Z",
+     "start_time": "2024-05-08T21:53:29.486687Z"
     }
    },
    "id": "c870f2fa48fe956c",
    "outputs": [],
-   "execution_count": 364
+   "execution_count": 33
   },
   {
    "cell_type": "code",
-   "source": [
-    "history = model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=128, batch_size=512,verbose=1)"
-   ],
+   "source": "history = model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=100, batch_size=512,verbose=1)",
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "end_time": "2024-05-08T21:51:43.100780Z",
-     "start_time": "2024-05-08T21:49:52.349687Z"
+     "end_time": "2024-05-08T22:59:09.987625Z",
+     "start_time": "2024-05-08T21:53:29.501701Z"
     }
    },
    "id": "d9a29cb1ff2dcba7",
@@ -165,44 +222,210 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Epoch 1/128\n",
-      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m23s\u001B[0m 110ms/step - accuracy: 0.3163 - categorical_crossentropy: 2.0931 - loss: 2.0931 - val_accuracy: 0.4530 - val_categorical_crossentropy: 1.6263 - val_loss: 1.6263\n",
-      "Epoch 2/128\n",
-      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m21s\u001B[0m 103ms/step - accuracy: 0.4638 - categorical_crossentropy: 1.5951 - loss: 1.5951 - val_accuracy: 0.4925 - val_categorical_crossentropy: 1.5218 - val_loss: 1.5218\n",
-      "Epoch 3/128\n",
-      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m21s\u001B[0m 103ms/step - accuracy: 0.5060 - categorical_crossentropy: 1.4841 - loss: 1.4841 - val_accuracy: 0.5260 - val_categorical_crossentropy: 1.4220 - val_loss: 1.4220\n",
-      "Epoch 4/128\n",
-      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m22s\u001B[0m 110ms/step - accuracy: 0.5344 - categorical_crossentropy: 1.4027 - loss: 1.4027 - val_accuracy: 0.5548 - val_categorical_crossentropy: 1.3626 - val_loss: 1.3626\n",
-      "Epoch 5/128\n",
-      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m21s\u001B[0m 105ms/step - accuracy: 0.5573 - categorical_crossentropy: 1.3422 - loss: 1.3422 - val_accuracy: 0.5616 - val_categorical_crossentropy: 1.3358 - val_loss: 1.3358\n",
-      "Epoch 6/128\n",
-      "\u001B[1m 20/203\u001B[0m \u001B[32m━\u001B[0m\u001B[37m━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[1m18s\u001B[0m 99ms/step - accuracy: 0.5690 - categorical_crossentropy: 1.3099 - loss: 1.3099"
-     ]
-    },
-    {
-     "ename": "KeyboardInterrupt",
-     "evalue": "",
-     "output_type": "error",
-     "traceback": [
-      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
-      "\u001B[0;31mKeyboardInterrupt\u001B[0m                         Traceback (most recent call last)",
-      "Cell \u001B[0;32mIn[365], line 1\u001B[0m\n\u001B[0;32m----> 1\u001B[0m history \u001B[38;5;241m=\u001B[39m \u001B[43mmodel\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mfit\u001B[49m\u001B[43m(\u001B[49m\u001B[43mX_train\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43my_train\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mvalidation_data\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43mX_val\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43my_val\u001B[49m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mepochs\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;241;43m128\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mbatch_size\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;241;43m512\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43mverbose\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;241;43m1\u001B[39;49m\u001B[43m)\u001B[49m\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/keras/src/utils/traceback_utils.py:117\u001B[0m, in \u001B[0;36mfilter_traceback.<locals>.error_handler\u001B[0;34m(*args, **kwargs)\u001B[0m\n\u001B[1;32m    115\u001B[0m filtered_tb \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;01mNone\u001B[39;00m\n\u001B[1;32m    116\u001B[0m \u001B[38;5;28;01mtry\u001B[39;00m:\n\u001B[0;32m--> 117\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mfn\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    118\u001B[0m \u001B[38;5;28;01mexcept\u001B[39;00m \u001B[38;5;167;01mException\u001B[39;00m \u001B[38;5;28;01mas\u001B[39;00m e:\n\u001B[1;32m    119\u001B[0m     filtered_tb \u001B[38;5;241m=\u001B[39m _process_traceback_frames(e\u001B[38;5;241m.\u001B[39m__traceback__)\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/keras/src/backend/tensorflow/trainer.py:314\u001B[0m, in \u001B[0;36mTensorFlowTrainer.fit\u001B[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq)\u001B[0m\n\u001B[1;32m    312\u001B[0m \u001B[38;5;28;01mfor\u001B[39;00m step, iterator \u001B[38;5;129;01min\u001B[39;00m epoch_iterator\u001B[38;5;241m.\u001B[39menumerate_epoch():\n\u001B[1;32m    313\u001B[0m     callbacks\u001B[38;5;241m.\u001B[39mon_train_batch_begin(step)\n\u001B[0;32m--> 314\u001B[0m     logs \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mtrain_function\u001B[49m\u001B[43m(\u001B[49m\u001B[43miterator\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    315\u001B[0m     logs \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_pythonify_logs(logs)\n\u001B[1;32m    316\u001B[0m     callbacks\u001B[38;5;241m.\u001B[39mon_train_batch_end(step, logs)\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/util/traceback_utils.py:150\u001B[0m, in \u001B[0;36mfilter_traceback.<locals>.error_handler\u001B[0;34m(*args, **kwargs)\u001B[0m\n\u001B[1;32m    148\u001B[0m filtered_tb \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;01mNone\u001B[39;00m\n\u001B[1;32m    149\u001B[0m \u001B[38;5;28;01mtry\u001B[39;00m:\n\u001B[0;32m--> 150\u001B[0m   \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mfn\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    151\u001B[0m \u001B[38;5;28;01mexcept\u001B[39;00m \u001B[38;5;167;01mException\u001B[39;00m \u001B[38;5;28;01mas\u001B[39;00m e:\n\u001B[1;32m    152\u001B[0m   filtered_tb \u001B[38;5;241m=\u001B[39m _process_traceback_frames(e\u001B[38;5;241m.\u001B[39m__traceback__)\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:833\u001B[0m, in \u001B[0;36mFunction.__call__\u001B[0;34m(self, *args, **kwds)\u001B[0m\n\u001B[1;32m    830\u001B[0m compiler \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mxla\u001B[39m\u001B[38;5;124m\"\u001B[39m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_jit_compile \u001B[38;5;28;01melse\u001B[39;00m \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mnonXla\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m    832\u001B[0m \u001B[38;5;28;01mwith\u001B[39;00m OptionalXlaContext(\u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_jit_compile):\n\u001B[0;32m--> 833\u001B[0m   result \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_call\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwds\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    835\u001B[0m new_tracing_count \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mexperimental_get_tracing_count()\n\u001B[1;32m    836\u001B[0m without_tracing \u001B[38;5;241m=\u001B[39m (tracing_count \u001B[38;5;241m==\u001B[39m new_tracing_count)\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:878\u001B[0m, in \u001B[0;36mFunction._call\u001B[0;34m(self, *args, **kwds)\u001B[0m\n\u001B[1;32m    875\u001B[0m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_lock\u001B[38;5;241m.\u001B[39mrelease()\n\u001B[1;32m    876\u001B[0m \u001B[38;5;66;03m# In this case we have not created variables on the first call. So we can\u001B[39;00m\n\u001B[1;32m    877\u001B[0m \u001B[38;5;66;03m# run the first trace but we should fail if variables are created.\u001B[39;00m\n\u001B[0;32m--> 878\u001B[0m results \u001B[38;5;241m=\u001B[39m \u001B[43mtracing_compilation\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mcall_function\u001B[49m\u001B[43m(\u001B[49m\n\u001B[1;32m    879\u001B[0m \u001B[43m    \u001B[49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mkwds\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_variable_creation_config\u001B[49m\n\u001B[1;32m    880\u001B[0m \u001B[43m\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    881\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_created_variables:\n\u001B[1;32m    882\u001B[0m   \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mCreating variables on a non-first call to a function\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m    883\u001B[0m                    \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m decorated with tf.function.\u001B[39m\u001B[38;5;124m\"\u001B[39m)\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py:139\u001B[0m, in \u001B[0;36mcall_function\u001B[0;34m(args, kwargs, tracing_options)\u001B[0m\n\u001B[1;32m    137\u001B[0m bound_args \u001B[38;5;241m=\u001B[39m function\u001B[38;5;241m.\u001B[39mfunction_type\u001B[38;5;241m.\u001B[39mbind(\u001B[38;5;241m*\u001B[39margs, \u001B[38;5;241m*\u001B[39m\u001B[38;5;241m*\u001B[39mkwargs)\n\u001B[1;32m    138\u001B[0m flat_inputs \u001B[38;5;241m=\u001B[39m function\u001B[38;5;241m.\u001B[39mfunction_type\u001B[38;5;241m.\u001B[39munpack_inputs(bound_args)\n\u001B[0;32m--> 139\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mfunction\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_call_flat\u001B[49m\u001B[43m(\u001B[49m\u001B[43m  \u001B[49m\u001B[38;5;66;43;03m# pylint: disable=protected-access\u001B[39;49;00m\n\u001B[1;32m    140\u001B[0m \u001B[43m    \u001B[49m\u001B[43mflat_inputs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mcaptured_inputs\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mfunction\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mcaptured_inputs\u001B[49m\n\u001B[1;32m    141\u001B[0m \u001B[43m\u001B[49m\u001B[43m)\u001B[49m\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/concrete_function.py:1322\u001B[0m, in \u001B[0;36mConcreteFunction._call_flat\u001B[0;34m(self, tensor_inputs, captured_inputs)\u001B[0m\n\u001B[1;32m   1318\u001B[0m possible_gradient_type \u001B[38;5;241m=\u001B[39m gradients_util\u001B[38;5;241m.\u001B[39mPossibleTapeGradientTypes(args)\n\u001B[1;32m   1319\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m (possible_gradient_type \u001B[38;5;241m==\u001B[39m gradients_util\u001B[38;5;241m.\u001B[39mPOSSIBLE_GRADIENT_TYPES_NONE\n\u001B[1;32m   1320\u001B[0m     \u001B[38;5;129;01mand\u001B[39;00m executing_eagerly):\n\u001B[1;32m   1321\u001B[0m   \u001B[38;5;66;03m# No tape is watching; skip to running the function.\u001B[39;00m\n\u001B[0;32m-> 1322\u001B[0m   \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_inference_function\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mcall_preflattened\u001B[49m\u001B[43m(\u001B[49m\u001B[43margs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1323\u001B[0m forward_backward \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_select_forward_and_backward_functions(\n\u001B[1;32m   1324\u001B[0m     args,\n\u001B[1;32m   1325\u001B[0m     possible_gradient_type,\n\u001B[1;32m   1326\u001B[0m     executing_eagerly)\n\u001B[1;32m   1327\u001B[0m forward_function, args_with_tangents \u001B[38;5;241m=\u001B[39m forward_backward\u001B[38;5;241m.\u001B[39mforward()\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py:216\u001B[0m, in \u001B[0;36mAtomicFunction.call_preflattened\u001B[0;34m(self, args)\u001B[0m\n\u001B[1;32m    214\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21mcall_preflattened\u001B[39m(\u001B[38;5;28mself\u001B[39m, args: Sequence[core\u001B[38;5;241m.\u001B[39mTensor]) \u001B[38;5;241m-\u001B[39m\u001B[38;5;241m>\u001B[39m Any:\n\u001B[1;32m    215\u001B[0m \u001B[38;5;250m  \u001B[39m\u001B[38;5;124;03m\"\"\"Calls with flattened tensor inputs and returns the structured output.\"\"\"\u001B[39;00m\n\u001B[0;32m--> 216\u001B[0m   flat_outputs \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mcall_flat\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    217\u001B[0m   \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mfunction_type\u001B[38;5;241m.\u001B[39mpack_output(flat_outputs)\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py:251\u001B[0m, in \u001B[0;36mAtomicFunction.call_flat\u001B[0;34m(self, *args)\u001B[0m\n\u001B[1;32m    249\u001B[0m \u001B[38;5;28;01mwith\u001B[39;00m record\u001B[38;5;241m.\u001B[39mstop_recording():\n\u001B[1;32m    250\u001B[0m   \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_bound_context\u001B[38;5;241m.\u001B[39mexecuting_eagerly():\n\u001B[0;32m--> 251\u001B[0m     outputs \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_bound_context\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mcall_function\u001B[49m\u001B[43m(\u001B[49m\n\u001B[1;32m    252\u001B[0m \u001B[43m        \u001B[49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mname\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    253\u001B[0m \u001B[43m        \u001B[49m\u001B[38;5;28;43mlist\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43margs\u001B[49m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    254\u001B[0m \u001B[43m        \u001B[49m\u001B[38;5;28;43mlen\u001B[39;49m\u001B[43m(\u001B[49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mfunction_type\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mflat_outputs\u001B[49m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    255\u001B[0m \u001B[43m    \u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    256\u001B[0m   \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[1;32m    257\u001B[0m     outputs \u001B[38;5;241m=\u001B[39m make_call_op_in_graph(\n\u001B[1;32m    258\u001B[0m         \u001B[38;5;28mself\u001B[39m,\n\u001B[1;32m    259\u001B[0m         \u001B[38;5;28mlist\u001B[39m(args),\n\u001B[1;32m    260\u001B[0m         \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_bound_context\u001B[38;5;241m.\u001B[39mfunction_call_options\u001B[38;5;241m.\u001B[39mas_attrs(),\n\u001B[1;32m    261\u001B[0m     )\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/context.py:1500\u001B[0m, in \u001B[0;36mContext.call_function\u001B[0;34m(self, name, tensor_inputs, num_outputs)\u001B[0m\n\u001B[1;32m   1498\u001B[0m cancellation_context \u001B[38;5;241m=\u001B[39m cancellation\u001B[38;5;241m.\u001B[39mcontext()\n\u001B[1;32m   1499\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m cancellation_context \u001B[38;5;129;01mis\u001B[39;00m \u001B[38;5;28;01mNone\u001B[39;00m:\n\u001B[0;32m-> 1500\u001B[0m   outputs \u001B[38;5;241m=\u001B[39m \u001B[43mexecute\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mexecute\u001B[49m\u001B[43m(\u001B[49m\n\u001B[1;32m   1501\u001B[0m \u001B[43m      \u001B[49m\u001B[43mname\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mdecode\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mutf-8\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1502\u001B[0m \u001B[43m      \u001B[49m\u001B[43mnum_outputs\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mnum_outputs\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1503\u001B[0m \u001B[43m      \u001B[49m\u001B[43minputs\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mtensor_inputs\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1504\u001B[0m \u001B[43m      \u001B[49m\u001B[43mattrs\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mattrs\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1505\u001B[0m \u001B[43m      \u001B[49m\u001B[43mctx\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1506\u001B[0m \u001B[43m  \u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1507\u001B[0m \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[1;32m   1508\u001B[0m   outputs \u001B[38;5;241m=\u001B[39m execute\u001B[38;5;241m.\u001B[39mexecute_with_cancellation(\n\u001B[1;32m   1509\u001B[0m       name\u001B[38;5;241m.\u001B[39mdecode(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mutf-8\u001B[39m\u001B[38;5;124m\"\u001B[39m),\n\u001B[1;32m   1510\u001B[0m       num_outputs\u001B[38;5;241m=\u001B[39mnum_outputs,\n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m   1514\u001B[0m       cancellation_manager\u001B[38;5;241m=\u001B[39mcancellation_context,\n\u001B[1;32m   1515\u001B[0m   )\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/execute.py:53\u001B[0m, in \u001B[0;36mquick_execute\u001B[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001B[0m\n\u001B[1;32m     51\u001B[0m \u001B[38;5;28;01mtry\u001B[39;00m:\n\u001B[1;32m     52\u001B[0m   ctx\u001B[38;5;241m.\u001B[39mensure_initialized()\n\u001B[0;32m---> 53\u001B[0m   tensors \u001B[38;5;241m=\u001B[39m \u001B[43mpywrap_tfe\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mTFE_Py_Execute\u001B[49m\u001B[43m(\u001B[49m\u001B[43mctx\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_handle\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mdevice_name\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mop_name\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m     54\u001B[0m \u001B[43m                                      \u001B[49m\u001B[43minputs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mattrs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mnum_outputs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m     55\u001B[0m \u001B[38;5;28;01mexcept\u001B[39;00m core\u001B[38;5;241m.\u001B[39m_NotOkStatusException \u001B[38;5;28;01mas\u001B[39;00m e:\n\u001B[1;32m     56\u001B[0m   \u001B[38;5;28;01mif\u001B[39;00m name \u001B[38;5;129;01mis\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;28;01mNone\u001B[39;00m:\n",
-      "\u001B[0;31mKeyboardInterrupt\u001B[0m: "
+      "Epoch 1/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m41s\u001B[0m 195ms/step - accuracy: 0.2948 - categorical_crossentropy: 2.1236 - loss: 2.1236 - val_accuracy: 0.4406 - val_categorical_crossentropy: 1.6709 - val_loss: 1.6709\n",
+      "Epoch 2/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 195ms/step - accuracy: 0.4488 - categorical_crossentropy: 1.6287 - loss: 1.6287 - val_accuracy: 0.4916 - val_categorical_crossentropy: 1.5375 - val_loss: 1.5375\n",
+      "Epoch 3/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 192ms/step - accuracy: 0.5003 - categorical_crossentropy: 1.5024 - loss: 1.5024 - val_accuracy: 0.5082 - val_categorical_crossentropy: 1.4715 - val_loss: 1.4715\n",
+      "Epoch 4/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 193ms/step - accuracy: 0.5329 - categorical_crossentropy: 1.4165 - loss: 1.4165 - val_accuracy: 0.5567 - val_categorical_crossentropy: 1.3579 - val_loss: 1.3579\n",
+      "Epoch 5/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 195ms/step - accuracy: 0.5620 - categorical_crossentropy: 1.3373 - loss: 1.3373 - val_accuracy: 0.5753 - val_categorical_crossentropy: 1.2943 - val_loss: 1.2943\n",
+      "Epoch 6/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 197ms/step - accuracy: 0.5795 - categorical_crossentropy: 1.2859 - loss: 1.2859 - val_accuracy: 0.5910 - val_categorical_crossentropy: 1.2548 - val_loss: 1.2548\n",
+      "Epoch 7/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 199ms/step - accuracy: 0.5989 - categorical_crossentropy: 1.2320 - loss: 1.2320 - val_accuracy: 0.6051 - val_categorical_crossentropy: 1.2214 - val_loss: 1.2214\n",
+      "Epoch 8/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m41s\u001B[0m 200ms/step - accuracy: 0.6088 - categorical_crossentropy: 1.1971 - loss: 1.1971 - val_accuracy: 0.6104 - val_categorical_crossentropy: 1.2011 - val_loss: 1.2011\n",
+      "Epoch 9/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 198ms/step - accuracy: 0.6178 - categorical_crossentropy: 1.1737 - loss: 1.1737 - val_accuracy: 0.6231 - val_categorical_crossentropy: 1.1543 - val_loss: 1.1543\n",
+      "Epoch 10/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 197ms/step - accuracy: 0.6283 - categorical_crossentropy: 1.1408 - loss: 1.1408 - val_accuracy: 0.6287 - val_categorical_crossentropy: 1.1436 - val_loss: 1.1436\n",
+      "Epoch 11/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 197ms/step - accuracy: 0.6363 - categorical_crossentropy: 1.1160 - loss: 1.1160 - val_accuracy: 0.6209 - val_categorical_crossentropy: 1.1535 - val_loss: 1.1535\n",
+      "Epoch 12/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 197ms/step - accuracy: 0.6442 - categorical_crossentropy: 1.0906 - loss: 1.0906 - val_accuracy: 0.6441 - val_categorical_crossentropy: 1.0973 - val_loss: 1.0973\n",
+      "Epoch 13/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 197ms/step - accuracy: 0.6476 - categorical_crossentropy: 1.0813 - loss: 1.0813 - val_accuracy: 0.6483 - val_categorical_crossentropy: 1.0825 - val_loss: 1.0825\n",
+      "Epoch 14/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 197ms/step - accuracy: 0.6563 - categorical_crossentropy: 1.0558 - loss: 1.0558 - val_accuracy: 0.6471 - val_categorical_crossentropy: 1.0873 - val_loss: 1.0873\n",
+      "Epoch 15/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 197ms/step - accuracy: 0.6590 - categorical_crossentropy: 1.0406 - loss: 1.0406 - val_accuracy: 0.6542 - val_categorical_crossentropy: 1.0638 - val_loss: 1.0638\n",
+      "Epoch 16/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 197ms/step - accuracy: 0.6634 - categorical_crossentropy: 1.0273 - loss: 1.0273 - val_accuracy: 0.6590 - val_categorical_crossentropy: 1.0514 - val_loss: 1.0514\n",
+      "Epoch 17/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 197ms/step - accuracy: 0.6699 - categorical_crossentropy: 1.0082 - loss: 1.0082 - val_accuracy: 0.6628 - val_categorical_crossentropy: 1.0312 - val_loss: 1.0312\n",
+      "Epoch 18/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 197ms/step - accuracy: 0.6715 - categorical_crossentropy: 1.0024 - loss: 1.0024 - val_accuracy: 0.6656 - val_categorical_crossentropy: 1.0203 - val_loss: 1.0203\n",
+      "Epoch 19/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 197ms/step - accuracy: 0.6769 - categorical_crossentropy: 0.9851 - loss: 0.9851 - val_accuracy: 0.6731 - val_categorical_crossentropy: 1.0065 - val_loss: 1.0065\n",
+      "Epoch 20/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 197ms/step - accuracy: 0.6767 - categorical_crossentropy: 0.9784 - loss: 0.9784 - val_accuracy: 0.6669 - val_categorical_crossentropy: 1.0231 - val_loss: 1.0231\n",
+      "Epoch 21/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 198ms/step - accuracy: 0.6860 - categorical_crossentropy: 0.9575 - loss: 0.9575 - val_accuracy: 0.6708 - val_categorical_crossentropy: 1.0102 - val_loss: 1.0102\n",
+      "Epoch 22/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 197ms/step - accuracy: 0.6879 - categorical_crossentropy: 0.9477 - loss: 0.9477 - val_accuracy: 0.6803 - val_categorical_crossentropy: 0.9768 - val_loss: 0.9768\n",
+      "Epoch 23/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 194ms/step - accuracy: 0.6934 - categorical_crossentropy: 0.9332 - loss: 0.9332 - val_accuracy: 0.6790 - val_categorical_crossentropy: 0.9915 - val_loss: 0.9915\n",
+      "Epoch 24/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 191ms/step - accuracy: 0.6981 - categorical_crossentropy: 0.9178 - loss: 0.9178 - val_accuracy: 0.6792 - val_categorical_crossentropy: 0.9836 - val_loss: 0.9836\n",
+      "Epoch 25/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 191ms/step - accuracy: 0.6964 - categorical_crossentropy: 0.9162 - loss: 0.9162 - val_accuracy: 0.6935 - val_categorical_crossentropy: 0.9435 - val_loss: 0.9435\n",
+      "Epoch 26/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 190ms/step - accuracy: 0.7049 - categorical_crossentropy: 0.8992 - loss: 0.8992 - val_accuracy: 0.6892 - val_categorical_crossentropy: 0.9526 - val_loss: 0.9526\n",
+      "Epoch 27/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 191ms/step - accuracy: 0.7062 - categorical_crossentropy: 0.8890 - loss: 0.8890 - val_accuracy: 0.6948 - val_categorical_crossentropy: 0.9300 - val_loss: 0.9300\n",
+      "Epoch 28/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 190ms/step - accuracy: 0.7077 - categorical_crossentropy: 0.8806 - loss: 0.8806 - val_accuracy: 0.6957 - val_categorical_crossentropy: 0.9333 - val_loss: 0.9333\n",
+      "Epoch 29/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 191ms/step - accuracy: 0.7105 - categorical_crossentropy: 0.8734 - loss: 0.8734 - val_accuracy: 0.6952 - val_categorical_crossentropy: 0.9258 - val_loss: 0.9258\n",
+      "Epoch 30/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 191ms/step - accuracy: 0.7132 - categorical_crossentropy: 0.8649 - loss: 0.8649 - val_accuracy: 0.6875 - val_categorical_crossentropy: 0.9626 - val_loss: 0.9626\n",
+      "Epoch 31/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 192ms/step - accuracy: 0.7138 - categorical_crossentropy: 0.8649 - loss: 0.8649 - val_accuracy: 0.7091 - val_categorical_crossentropy: 0.8959 - val_loss: 0.8959\n",
+      "Epoch 32/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 191ms/step - accuracy: 0.7189 - categorical_crossentropy: 0.8472 - loss: 0.8472 - val_accuracy: 0.7038 - val_categorical_crossentropy: 0.9048 - val_loss: 0.9048\n",
+      "Epoch 33/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 193ms/step - accuracy: 0.7183 - categorical_crossentropy: 0.8467 - loss: 0.8467 - val_accuracy: 0.7048 - val_categorical_crossentropy: 0.9048 - val_loss: 0.9048\n",
+      "Epoch 34/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 191ms/step - accuracy: 0.7224 - categorical_crossentropy: 0.8378 - loss: 0.8378 - val_accuracy: 0.7115 - val_categorical_crossentropy: 0.8896 - val_loss: 0.8896\n",
+      "Epoch 35/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 192ms/step - accuracy: 0.7266 - categorical_crossentropy: 0.8271 - loss: 0.8271 - val_accuracy: 0.7123 - val_categorical_crossentropy: 0.8807 - val_loss: 0.8807\n",
+      "Epoch 36/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 190ms/step - accuracy: 0.7279 - categorical_crossentropy: 0.8214 - loss: 0.8214 - val_accuracy: 0.7042 - val_categorical_crossentropy: 0.9046 - val_loss: 0.9046\n",
+      "Epoch 37/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 191ms/step - accuracy: 0.7266 - categorical_crossentropy: 0.8183 - loss: 0.8183 - val_accuracy: 0.7135 - val_categorical_crossentropy: 0.8833 - val_loss: 0.8833\n",
+      "Epoch 38/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 191ms/step - accuracy: 0.7256 - categorical_crossentropy: 0.8134 - loss: 0.8134 - val_accuracy: 0.7114 - val_categorical_crossentropy: 0.8786 - val_loss: 0.8786\n",
+      "Epoch 39/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 199ms/step - accuracy: 0.7302 - categorical_crossentropy: 0.8036 - loss: 0.8036 - val_accuracy: 0.7035 - val_categorical_crossentropy: 0.9117 - val_loss: 0.9117\n",
+      "Epoch 40/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m41s\u001B[0m 201ms/step - accuracy: 0.7310 - categorical_crossentropy: 0.8038 - loss: 0.8038 - val_accuracy: 0.7190 - val_categorical_crossentropy: 0.8603 - val_loss: 0.8603\n",
+      "Epoch 41/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m41s\u001B[0m 204ms/step - accuracy: 0.7345 - categorical_crossentropy: 0.7928 - loss: 0.7928 - val_accuracy: 0.7164 - val_categorical_crossentropy: 0.8584 - val_loss: 0.8584\n",
+      "Epoch 42/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 199ms/step - accuracy: 0.7348 - categorical_crossentropy: 0.7909 - loss: 0.7909 - val_accuracy: 0.7140 - val_categorical_crossentropy: 0.8761 - val_loss: 0.8761\n",
+      "Epoch 43/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 192ms/step - accuracy: 0.7369 - categorical_crossentropy: 0.7840 - loss: 0.7840 - val_accuracy: 0.7235 - val_categorical_crossentropy: 0.8400 - val_loss: 0.8400\n",
+      "Epoch 44/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 193ms/step - accuracy: 0.7395 - categorical_crossentropy: 0.7801 - loss: 0.7801 - val_accuracy: 0.7218 - val_categorical_crossentropy: 0.8614 - val_loss: 0.8614\n",
+      "Epoch 45/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 191ms/step - accuracy: 0.7452 - categorical_crossentropy: 0.7684 - loss: 0.7684 - val_accuracy: 0.7232 - val_categorical_crossentropy: 0.8555 - val_loss: 0.8555\n",
+      "Epoch 46/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 192ms/step - accuracy: 0.7433 - categorical_crossentropy: 0.7686 - loss: 0.7686 - val_accuracy: 0.7243 - val_categorical_crossentropy: 0.8438 - val_loss: 0.8438\n",
+      "Epoch 47/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 191ms/step - accuracy: 0.7462 - categorical_crossentropy: 0.7585 - loss: 0.7585 - val_accuracy: 0.7171 - val_categorical_crossentropy: 0.8654 - val_loss: 0.8654\n",
+      "Epoch 48/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 193ms/step - accuracy: 0.7454 - categorical_crossentropy: 0.7583 - loss: 0.7583 - val_accuracy: 0.7183 - val_categorical_crossentropy: 0.8612 - val_loss: 0.8612\n",
+      "Epoch 49/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 192ms/step - accuracy: 0.7462 - categorical_crossentropy: 0.7586 - loss: 0.7586 - val_accuracy: 0.7256 - val_categorical_crossentropy: 0.8426 - val_loss: 0.8426\n",
+      "Epoch 50/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 192ms/step - accuracy: 0.7485 - categorical_crossentropy: 0.7487 - loss: 0.7487 - val_accuracy: 0.7209 - val_categorical_crossentropy: 0.8540 - val_loss: 0.8540\n",
+      "Epoch 51/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 191ms/step - accuracy: 0.7507 - categorical_crossentropy: 0.7455 - loss: 0.7455 - val_accuracy: 0.7306 - val_categorical_crossentropy: 0.8268 - val_loss: 0.8268\n",
+      "Epoch 52/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 192ms/step - accuracy: 0.7512 - categorical_crossentropy: 0.7424 - loss: 0.7424 - val_accuracy: 0.7257 - val_categorical_crossentropy: 0.8381 - val_loss: 0.8381\n",
+      "Epoch 53/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 192ms/step - accuracy: 0.7519 - categorical_crossentropy: 0.7382 - loss: 0.7382 - val_accuracy: 0.7284 - val_categorical_crossentropy: 0.8371 - val_loss: 0.8371\n",
+      "Epoch 54/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 192ms/step - accuracy: 0.7509 - categorical_crossentropy: 0.7438 - loss: 0.7438 - val_accuracy: 0.7299 - val_categorical_crossentropy: 0.8271 - val_loss: 0.8271\n",
+      "Epoch 55/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 193ms/step - accuracy: 0.7530 - categorical_crossentropy: 0.7335 - loss: 0.7335 - val_accuracy: 0.7316 - val_categorical_crossentropy: 0.8228 - val_loss: 0.8228\n",
+      "Epoch 56/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 192ms/step - accuracy: 0.7599 - categorical_crossentropy: 0.7149 - loss: 0.7149 - val_accuracy: 0.7334 - val_categorical_crossentropy: 0.8203 - val_loss: 0.8203\n",
+      "Epoch 57/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 192ms/step - accuracy: 0.7570 - categorical_crossentropy: 0.7235 - loss: 0.7235 - val_accuracy: 0.7399 - val_categorical_crossentropy: 0.8031 - val_loss: 0.8031\n",
+      "Epoch 58/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 192ms/step - accuracy: 0.7602 - categorical_crossentropy: 0.7054 - loss: 0.7054 - val_accuracy: 0.7307 - val_categorical_crossentropy: 0.8337 - val_loss: 0.8337\n",
+      "Epoch 59/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 197ms/step - accuracy: 0.7621 - categorical_crossentropy: 0.7097 - loss: 0.7097 - val_accuracy: 0.7347 - val_categorical_crossentropy: 0.8101 - val_loss: 0.8101\n",
+      "Epoch 60/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 192ms/step - accuracy: 0.7632 - categorical_crossentropy: 0.7053 - loss: 0.7053 - val_accuracy: 0.7384 - val_categorical_crossentropy: 0.8032 - val_loss: 0.8032\n",
+      "Epoch 61/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 192ms/step - accuracy: 0.7649 - categorical_crossentropy: 0.7012 - loss: 0.7012 - val_accuracy: 0.7368 - val_categorical_crossentropy: 0.8110 - val_loss: 0.8110\n",
+      "Epoch 62/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 192ms/step - accuracy: 0.7652 - categorical_crossentropy: 0.6944 - loss: 0.6944 - val_accuracy: 0.7396 - val_categorical_crossentropy: 0.8081 - val_loss: 0.8081\n",
+      "Epoch 63/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 194ms/step - accuracy: 0.7644 - categorical_crossentropy: 0.6977 - loss: 0.6977 - val_accuracy: 0.7348 - val_categorical_crossentropy: 0.8231 - val_loss: 0.8231\n",
+      "Epoch 64/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 192ms/step - accuracy: 0.7645 - categorical_crossentropy: 0.6978 - loss: 0.6978 - val_accuracy: 0.7423 - val_categorical_crossentropy: 0.7972 - val_loss: 0.7972\n",
+      "Epoch 65/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 190ms/step - accuracy: 0.7637 - categorical_crossentropy: 0.6962 - loss: 0.6962 - val_accuracy: 0.7407 - val_categorical_crossentropy: 0.8024 - val_loss: 0.8024\n",
+      "Epoch 66/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m38s\u001B[0m 186ms/step - accuracy: 0.7657 - categorical_crossentropy: 0.6925 - loss: 0.6925 - val_accuracy: 0.7446 - val_categorical_crossentropy: 0.7828 - val_loss: 0.7828\n",
+      "Epoch 67/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m38s\u001B[0m 186ms/step - accuracy: 0.7664 - categorical_crossentropy: 0.6904 - loss: 0.6904 - val_accuracy: 0.7409 - val_categorical_crossentropy: 0.7943 - val_loss: 0.7943\n",
+      "Epoch 68/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m38s\u001B[0m 186ms/step - accuracy: 0.7656 - categorical_crossentropy: 0.6905 - loss: 0.6905 - val_accuracy: 0.7375 - val_categorical_crossentropy: 0.8098 - val_loss: 0.8098\n",
+      "Epoch 69/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m38s\u001B[0m 186ms/step - accuracy: 0.7688 - categorical_crossentropy: 0.6854 - loss: 0.6854 - val_accuracy: 0.7449 - val_categorical_crossentropy: 0.7855 - val_loss: 0.7855\n",
+      "Epoch 70/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m38s\u001B[0m 185ms/step - accuracy: 0.7704 - categorical_crossentropy: 0.6809 - loss: 0.6809 - val_accuracy: 0.7412 - val_categorical_crossentropy: 0.8027 - val_loss: 0.8027\n",
+      "Epoch 71/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m38s\u001B[0m 186ms/step - accuracy: 0.7710 - categorical_crossentropy: 0.6799 - loss: 0.6799 - val_accuracy: 0.7387 - val_categorical_crossentropy: 0.8039 - val_loss: 0.8039\n",
+      "Epoch 72/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m38s\u001B[0m 186ms/step - accuracy: 0.7748 - categorical_crossentropy: 0.6719 - loss: 0.6719 - val_accuracy: 0.7351 - val_categorical_crossentropy: 0.8102 - val_loss: 0.8102\n",
+      "Epoch 73/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m39s\u001B[0m 190ms/step - accuracy: 0.7721 - categorical_crossentropy: 0.6711 - loss: 0.6711 - val_accuracy: 0.7409 - val_categorical_crossentropy: 0.7975 - val_loss: 0.7975\n",
+      "Epoch 74/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m38s\u001B[0m 186ms/step - accuracy: 0.7757 - categorical_crossentropy: 0.6628 - loss: 0.6628 - val_accuracy: 0.7496 - val_categorical_crossentropy: 0.7748 - val_loss: 0.7748\n",
+      "Epoch 75/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m38s\u001B[0m 186ms/step - accuracy: 0.7775 - categorical_crossentropy: 0.6588 - loss: 0.6588 - val_accuracy: 0.7434 - val_categorical_crossentropy: 0.7885 - val_loss: 0.7885\n",
+      "Epoch 76/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m38s\u001B[0m 186ms/step - accuracy: 0.7749 - categorical_crossentropy: 0.6642 - loss: 0.6642 - val_accuracy: 0.7456 - val_categorical_crossentropy: 0.7880 - val_loss: 0.7880\n",
+      "Epoch 77/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m38s\u001B[0m 186ms/step - accuracy: 0.7746 - categorical_crossentropy: 0.6617 - loss: 0.6617 - val_accuracy: 0.7459 - val_categorical_crossentropy: 0.7838 - val_loss: 0.7838\n",
+      "Epoch 78/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m38s\u001B[0m 186ms/step - accuracy: 0.7773 - categorical_crossentropy: 0.6573 - loss: 0.6573 - val_accuracy: 0.7489 - val_categorical_crossentropy: 0.7672 - val_loss: 0.7672\n",
+      "Epoch 79/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m38s\u001B[0m 187ms/step - accuracy: 0.7796 - categorical_crossentropy: 0.6475 - loss: 0.6475 - val_accuracy: 0.7464 - val_categorical_crossentropy: 0.7888 - val_loss: 0.7888\n",
+      "Epoch 80/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m42s\u001B[0m 205ms/step - accuracy: 0.7769 - categorical_crossentropy: 0.6605 - loss: 0.6605 - val_accuracy: 0.7540 - val_categorical_crossentropy: 0.7618 - val_loss: 0.7618\n",
+      "Epoch 81/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 198ms/step - accuracy: 0.7826 - categorical_crossentropy: 0.6409 - loss: 0.6409 - val_accuracy: 0.7546 - val_categorical_crossentropy: 0.7715 - val_loss: 0.7715\n",
+      "Epoch 82/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 198ms/step - accuracy: 0.7814 - categorical_crossentropy: 0.6478 - loss: 0.6478 - val_accuracy: 0.7355 - val_categorical_crossentropy: 0.8056 - val_loss: 0.8056\n",
+      "Epoch 83/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 199ms/step - accuracy: 0.7820 - categorical_crossentropy: 0.6419 - loss: 0.6419 - val_accuracy: 0.7427 - val_categorical_crossentropy: 0.7849 - val_loss: 0.7849\n",
+      "Epoch 84/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 198ms/step - accuracy: 0.7797 - categorical_crossentropy: 0.6458 - loss: 0.6458 - val_accuracy: 0.7324 - val_categorical_crossentropy: 0.8259 - val_loss: 0.8259\n",
+      "Epoch 85/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 198ms/step - accuracy: 0.7791 - categorical_crossentropy: 0.6477 - loss: 0.6477 - val_accuracy: 0.7518 - val_categorical_crossentropy: 0.7633 - val_loss: 0.7633\n",
+      "Epoch 86/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m41s\u001B[0m 200ms/step - accuracy: 0.7865 - categorical_crossentropy: 0.6293 - loss: 0.6293 - val_accuracy: 0.7425 - val_categorical_crossentropy: 0.8040 - val_loss: 0.8040\n",
+      "Epoch 87/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m41s\u001B[0m 202ms/step - accuracy: 0.7841 - categorical_crossentropy: 0.6363 - loss: 0.6363 - val_accuracy: 0.7492 - val_categorical_crossentropy: 0.7739 - val_loss: 0.7739\n",
+      "Epoch 88/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m41s\u001B[0m 200ms/step - accuracy: 0.7868 - categorical_crossentropy: 0.6264 - loss: 0.6264 - val_accuracy: 0.7493 - val_categorical_crossentropy: 0.7788 - val_loss: 0.7788\n",
+      "Epoch 89/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 198ms/step - accuracy: 0.7836 - categorical_crossentropy: 0.6314 - loss: 0.6314 - val_accuracy: 0.7459 - val_categorical_crossentropy: 0.7938 - val_loss: 0.7938\n",
+      "Epoch 90/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 198ms/step - accuracy: 0.7820 - categorical_crossentropy: 0.6401 - loss: 0.6401 - val_accuracy: 0.7542 - val_categorical_crossentropy: 0.7696 - val_loss: 0.7696\n",
+      "Epoch 91/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 199ms/step - accuracy: 0.7874 - categorical_crossentropy: 0.6278 - loss: 0.6278 - val_accuracy: 0.7440 - val_categorical_crossentropy: 0.7823 - val_loss: 0.7823\n",
+      "Epoch 92/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 199ms/step - accuracy: 0.7819 - categorical_crossentropy: 0.6369 - loss: 0.6369 - val_accuracy: 0.7501 - val_categorical_crossentropy: 0.7776 - val_loss: 0.7776\n",
+      "Epoch 93/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m41s\u001B[0m 201ms/step - accuracy: 0.7885 - categorical_crossentropy: 0.6211 - loss: 0.6211 - val_accuracy: 0.7506 - val_categorical_crossentropy: 0.7745 - val_loss: 0.7745\n",
+      "Epoch 94/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m41s\u001B[0m 201ms/step - accuracy: 0.7888 - categorical_crossentropy: 0.6205 - loss: 0.6205 - val_accuracy: 0.7387 - val_categorical_crossentropy: 0.8172 - val_loss: 0.8172\n",
+      "Epoch 95/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 198ms/step - accuracy: 0.7859 - categorical_crossentropy: 0.6215 - loss: 0.6215 - val_accuracy: 0.7474 - val_categorical_crossentropy: 0.7912 - val_loss: 0.7912\n",
+      "Epoch 96/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 198ms/step - accuracy: 0.7900 - categorical_crossentropy: 0.6227 - loss: 0.6227 - val_accuracy: 0.7524 - val_categorical_crossentropy: 0.7696 - val_loss: 0.7696\n",
+      "Epoch 97/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 199ms/step - accuracy: 0.7930 - categorical_crossentropy: 0.6103 - loss: 0.6103 - val_accuracy: 0.7593 - val_categorical_crossentropy: 0.7601 - val_loss: 0.7601\n",
+      "Epoch 98/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 198ms/step - accuracy: 0.7886 - categorical_crossentropy: 0.6150 - loss: 0.6150 - val_accuracy: 0.7535 - val_categorical_crossentropy: 0.7641 - val_loss: 0.7641\n",
+      "Epoch 99/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 198ms/step - accuracy: 0.7896 - categorical_crossentropy: 0.6114 - loss: 0.6114 - val_accuracy: 0.7521 - val_categorical_crossentropy: 0.7706 - val_loss: 0.7706\n",
+      "Epoch 100/100\n",
+      "\u001B[1m203/203\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m40s\u001B[0m 199ms/step - accuracy: 0.7876 - categorical_crossentropy: 0.6226 - loss: 0.6226 - val_accuracy: 0.7596 - val_categorical_crossentropy: 0.7480 - val_loss: 0.7480\n"
      ]
     }
    ],
-   "execution_count": 365
+   "execution_count": 34
   },
   {
    "cell_type": "code",
@@ -218,12 +441,34 @@
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "start_time": "2024-05-08T21:51:43.100034Z"
+     "end_time": "2024-05-08T22:59:10.204074Z",
+     "start_time": "2024-05-08T22:59:09.988626Z"
     }
    },
    "id": "db97a7f3cc91e456",
-   "outputs": [],
-   "execution_count": null
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "Text(0.5, 0, 'Epoch')"
+      ]
+     },
+     "execution_count": 35,
+     "metadata": {},
+     "output_type": "execute_result"
+    },
+    {
+     "data": {
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ],
+      "image/png": "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21NSUnjiiSeYN28e27ZtK3dWSkSqjgYFi0g5drudwYMHM3fuXGbPnl06Pub3evbsicfjKTeY9tglom7dutGkSRPq1q1bbp/fr2nTs2fP0ss9HTt2LP2aPn06n3322UnPlEBJyHj88ccBSEpK4vLLL2fcuHHk5uaSn59fofc9YsQINm/ezDvvvENycjJdunQ57n7169dnzpw57N27t9xjx2ZKtWrVqkKvKSL+oTM0InJcI0aMYOLEiVgsFh544IHj7nPeeefRq1cvHnjgAQ4dOkSbNm1YuXIlb775JpdddhktWrQA4C9/+Qt33303DzzwAMOGDWPNmjV89NFHZY513XXXMX36dK677jpuuOEGEhISmDVrFp988gn33nvvKevt0aMHkydPLg0ihw4d4p133qFnz54kJiZW6D337NmTWrVq8frrr3PdddeVGzN0zJ133smKFSsYNWoU48ePp0uXLlgsFn7++WcmT57MeeedV26q97Zt2wgPDz/u8WrVqlU6EFpEzowCjYgc17nnnktsbCx169Y94Uq2hmHw+uuv88ILL/Duu++SmZlJgwYNuOuuu7j++utL9xs5ciQWi4VXXnmF6dOn06pVKx577DHuuuuu0n1SUlL4+OOPefrpp3nkkUdwOp00adKEJ554glGjRp2y3j//+c/Y7XamTp3Kyy+/TExMDAMHDuTuu++u8Hu2WCxccMEFfPjhhyc8KwXQoEEDPv/8c15//XVmzJjBm2++iWmaNG7cmBtvvJHx48eXC0OPPfbYCY83fvx47r///grXKSLlGaZpmsEuQkRERKQyNIZGREREQp4CjYiIiIQ8BRoREREJeQo0IiIiEvIUaERERCTkKdCIiIhIyFOgERERkZCnQCMiIiIh76xbKTgjIw9/LiVoGJCUFOP340p56nXgqNeBo14HlvodOP7q9bHjnMpZF2hMkyr5EFfVcaU89Tpw1OvAUa8DS/0OnED1WpecREREJOQp0IiIiEjIU6ARERGRkHfWjaERERGpCj6fD6/XE+wyqg3DgOLiYtxu10nH0FitNiyWyp9fUaARERGpBNM0yc3NpKgoP9ilVDuZmRZ8Pt8p94uIiCY2NhHDMM74tRRoREREKuFYmImOTsBuD6/UH+Waxmo18HpPfHrGNE1cLif5+VkAxMUlnfFrKdCIiIicIZ/PWxpmoqNjg11OtWOz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"
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "execution_count": 35
   },
   {
    "cell_type": "markdown",
@@ -238,7 +483,7 @@
   {
    "cell_type": "code",
    "source": [
-    "prediction_word = \"också en kvinna\"\n",
+    "prediction_word = \"hvem er hun en mand\"\n",
     "prediction_word = tokenizer.texts_to_sequences([prediction_word])\n",
     "prediction_word = pad_sequences(prediction_word, maxlen=input_dim)\n",
     "prediction = model.predict([prediction_word])\n",
@@ -255,12 +500,34 @@
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "start_time": "2024-05-08T21:51:43.101794Z"
+     "end_time": "2024-05-08T23:02:56.321750Z",
+     "start_time": "2024-05-08T23:02:56.214980Z"
     }
    },
    "id": "2af1ef5d86413ee6",
-   "outputs": [],
-   "execution_count": null
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "\u001B[1m1/1\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m0s\u001B[0m 17ms/step\n",
+      "Danish - 0.4%\n",
+      "Dutch - 0.0%\n",
+      "English - 0.0%\n",
+      "French - 0.0%\n",
+      "German - 0.0%\n",
+      "Greek - 0.0%\n",
+      "Italian - 0.0%\n",
+      "Norwegian - 0.1%\n",
+      "Polish - 99.4%\n",
+      "Portuguese - 0.0%\n",
+      "Russian - 0.0%\n",
+      "Spanish - 0.0%\n",
+      "Swedish - 0.0%\n"
+     ]
+    }
+   ],
+   "execution_count": 45
   },
   {
    "cell_type": "code",
@@ -268,13 +535,13 @@
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "end_time": "2024-05-08T21:51:43.104576Z",
-     "start_time": "2024-05-08T21:51:43.103285Z"
+     "end_time": "2024-05-08T22:59:10.377991Z",
+     "start_time": "2024-05-08T22:59:10.353523Z"
     }
    },
    "id": "f103d5e7cc3146d9",
    "outputs": [],
-   "execution_count": null
+   "execution_count": 37
   }
  ],
  "metadata": {
