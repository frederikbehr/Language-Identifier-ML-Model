Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"094c4da1-f913-4ead-956e-504ebdebe075\" name=\"Changes\" comment=\"finished the scraper that gets the words, and started on making the model.ipynb\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/model.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/model.ipynb\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n        <option value=\"Jupyter Notebook\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;frederikbehr&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/frederikbehr/bookScraper&quot;,\r\n    &quot;accountId&quot;: &quot;a1ceff9a-a22e-4d55-a18f-7f81ab8f7f44&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2g9HwADAHy1BqC4AImrpKuMe5Fd\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.sentence.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;/Users/frederikalexanderbehrens/PycharmProjects/languageLense/data/Swedish&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$/data/Swedish\" />\r\n      <recent name=\"$PROJECT_DIR$/data/Norwegian\" />\r\n      <recent name=\"$PROJECT_DIR$\" />\r\n      <recent name=\"$PROJECT_DIR$/data/Italian\" />\r\n      <recent name=\"$PROJECT_DIR$/data/Danish\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"languageLense\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-91d5c284f522-JavaScript-PY-241.15989.155\" />\r\n        <option value=\"bundled-python-sdk-babbdf50b680-7c6932dee5e4-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-241.15989.155\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"094c4da1-f913-4ead-956e-504ebdebe075\" name=\"Changes\" comment=\"\" />\r\n      <created>1715103109466</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1715103109466</updated>\r\n      <workItem from=\"1715103112886\" duration=\"552000\" />\r\n      <workItem from=\"1715103765254\" duration=\"18002000\" />\r\n      <workItem from=\"1715173808593\" duration=\"186000\" />\r\n      <workItem from=\"1715174027315\" duration=\"1229000\" />\r\n      <workItem from=\"1715175283405\" duration=\"4947000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"first commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715103171708</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715103171708</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"first commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715103241019</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715103241019</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"finished the scraper that gets the words, and started on making the model.ipynb\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1715122448908</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1715122448908</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"first commit\" />\r\n    <MESSAGE value=\"finished the scraper that gets the words, and started on making the model.ipynb\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"finished the scraper that gets the words, and started on making the model.ipynb\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/languageLense$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1715122050520\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/bookScraper$sentence.coverage\" NAME=\"sentence Coverage Results\" MODIFIED=\"1715181085655\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/bookScraper$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1715174462631\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision a7d77bb972a0abe76a7d99906a318ed7684f5ee8)
+++ b/.idea/workspace.xml	(date 1715262667364)
@@ -4,10 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="094c4da1-f913-4ead-956e-504ebdebe075" name="Changes" comment="finished the scraper that gets the words, and started on making the model.ipynb">
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+    <list default="true" id="094c4da1-f913-4ead-956e-504ebdebe075" name="Changes" comment="model is saved. val_accuracy: 82.3%">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/model.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/model.ipynb" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/model.keras" beforeDir="false" afterPath="$PROJECT_DIR$/model.keras" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -41,13 +41,16 @@
   &quot;associatedIndex&quot;: 2
 }</component>
   <component name="ProjectId" id="2g9HwADAHy1BqC4AImrpKuMe5Fd" />
-  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
+    <ConfirmationsSetting value="2" id="Add" />
+  </component>
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
   <component name="PropertiesComponent">{
   &quot;keyToString&quot;: {
+    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
     &quot;Python.main.executor&quot;: &quot;Run&quot;,
     &quot;Python.sentence.executor&quot;: &quot;Run&quot;,
     &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
@@ -117,7 +120,8 @@
       <workItem from="1715103765254" duration="18002000" />
       <workItem from="1715173808593" duration="186000" />
       <workItem from="1715174027315" duration="1229000" />
-      <workItem from="1715175283405" duration="4947000" />
+      <workItem from="1715175283405" duration="8324000" />
+      <workItem from="1715214649277" duration="6347000" />
     </task>
     <task id="LOCAL-00001" summary="first commit">
       <option name="closed" value="true" />
@@ -143,20 +147,30 @@
       <option name="project" value="LOCAL" />
       <updated>1715122448908</updated>
     </task>
-    <option name="localTasksCounter" value="4" />
+    <task id="LOCAL-00004" summary="model is saved. val_accuracy: 82.3%">
+      <option name="closed" value="true" />
+      <created>1715190345153</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1715190345153</updated>
+    </task>
+    <option name="localTasksCounter" value="5" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
   </component>
   <component name="VcsManagerConfiguration">
+    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
     <MESSAGE value="first commit" />
     <MESSAGE value="finished the scraper that gets the words, and started on making the model.ipynb" />
-    <option name="LAST_COMMIT_MESSAGE" value="finished the scraper that gets the words, and started on making the model.ipynb" />
+    <MESSAGE value="model is saved. val_accuracy: 82.3%" />
+    <option name="LAST_COMMIT_MESSAGE" value="model is saved. val_accuracy: 82.3%" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/languageLense$main.coverage" NAME="main Coverage Results" MODIFIED="1715122050520" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/bookScraper$sentence.coverage" NAME="sentence Coverage Results" MODIFIED="1715181085655" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/bookScraper$sentence.coverage" NAME="sentence Coverage Results" MODIFIED="1715214742303" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/bookScraper$main.coverage" NAME="main Coverage Results" MODIFIED="1715174462631" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
Index: model.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"id\": \"initial_id\",\r\n   \"metadata\": {\r\n    \"collapsed\": true,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-09T03:57:39.139571Z\",\r\n     \"start_time\": \"2024-05-09T03:57:39.134441Z\"\r\n    }\r\n   },\r\n   \"source\": [\r\n    \"import numpy as np\\n\",\r\n    \"import pandas as pd\\n\",\r\n    \"import matplotlib.pyplot as plt\\n\",\r\n    \"import seaborn as sns\\n\",\r\n    \"import tensorflow as tf\\n\",\r\n    \"from tensorflow.keras.models import Sequential\\n\",\r\n    \"from tensorflow.keras.layers import Dense, Embedding, Conv1D, GlobalMaxPooling1D, LSTM, Dropout, GlobalAveragePooling1D, BatchNormalization\\n\",\r\n    \"from tensorflow.keras import optimizers\\n\",\r\n    \"from tensorflow.keras.preprocessing.text import Tokenizer\\n\",\r\n    \"from keras.src.utils import pad_sequences\\n\",\r\n    \"from sklearn.model_selection import train_test_split\"\r\n   ],\r\n   \"outputs\": [],\r\n   \"execution_count\": 935\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# Get data\\n\",\r\n    \"Pandas is used to get the data from the project directory.\\n\",\r\n    \"The data is a .csv file, that has been created by book texts and prepared to be listed in the file word-by-word.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   },\r\n   \"id\": \"b20ed3afab281b03\"\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"df = pd.read_csv('dataset.csv')\\n\",\r\n    \"df = df.sample(frac=1.0, random_state=42)\\n\",\r\n    \"df.head()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-09T03:57:39.192815Z\",\r\n     \"start_time\": \"2024-05-09T03:57:39.143716Z\"\r\n    }\r\n   },\r\n   \"id\": \"9934f095638f49f4\",\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"                                       Word    Language\\n19107                           we’ll do it     English\\n39550              antes della já se falava  Portuguese\\n18536  you saw what he wrote on the wall he     English\\n2807                   meende waar te nemen       Dutch\\n8350              jährlich steigend bis zum      German\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>Word</th>\\n      <th>Language</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>19107</th>\\n      <td>we’ll do it</td>\\n      <td>English</td>\\n    </tr>\\n    <tr>\\n      <th>39550</th>\\n      <td>antes della já se falava</td>\\n      <td>Portuguese</td>\\n    </tr>\\n    <tr>\\n      <th>18536</th>\\n      <td>you saw what he wrote on the wall he</td>\\n      <td>English</td>\\n    </tr>\\n    <tr>\\n      <th>2807</th>\\n      <td>meende waar te nemen</td>\\n      <td>Dutch</td>\\n    </tr>\\n    <tr>\\n      <th>8350</th>\\n      <td>jährlich steigend bis zum</td>\\n      <td>German</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 936,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"execution_count\": 936\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# Prepare data\\n\",\r\n    \"Divide the data into X and y. X is input and y is the desired output.\\n\",\r\n    \"One-Hot Encode it, so the language is categorical. This is done with Pandas.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   },\r\n   \"id\": \"e375f9241e794ae4\"\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Getting X - the input values\\n\",\r\n    \"X = df.iloc[:, :-1]\\n\",\r\n    \"X.loc[:, 'Word'] = X['Word'].astype(str)\\n\",\r\n    \"tokenizer = Tokenizer(char_level=True) # Used for turning the words into numbers\\n\",\r\n    \"tokenizer.fit_on_texts(X['Word'].tolist()) # Giving Tokenizer the data it needs to learn how to encode the words\\n\",\r\n    \"X_sequences = tokenizer.texts_to_sequences(X['Word'].tolist()) # Now the words are encoded into sequences\\n\",\r\n    \"input_dim = max(len(seq) for seq in X_sequences)\\n\",\r\n    \"X = pad_sequences(\\n\",\r\n    \"    X_sequences, \\n\",\r\n    \"    maxlen=input_dim, \\n\",\r\n    \"    padding='post'\\n\",\r\n    \") # Making all input values be of same length\\n\",\r\n    \"print(f\\\"Rows: {len(X)}\\\")\\n\",\r\n    \"\\n\",\r\n    \"# Getting y - the output values\\n\",\r\n    \"y_pre_training = df.iloc[:, -1:]\\n\",\r\n    \"y = pd.get_dummies(y_pre_training).values\\n\",\r\n    \"print(f\\\"Amount of languages to identify: {len(y[1])}\\\")\\n\",\r\n    \"\\n\",\r\n    \"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\\n\",\r\n    \"X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-09T03:57:39.816997Z\",\r\n     \"start_time\": \"2024-05-09T03:57:39.192387Z\"\r\n    }\r\n   },\r\n   \"id\": \"ba4d86402045de27\",\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Rows: 60100\\n\",\r\n      \"Amount of languages to identify: 13\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"execution_count\": 937\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"model = Sequential()\\n\",\r\n    \"model.add(Conv1D(input_dim, 5, activation='relu'))  # Convolutional layer\\n\",\r\n    \"tf.keras.layers.SimpleRNN(5, activation='relu'),\\n\",\r\n    \"model.add(LSTM(512, return_sequences=True))\\n\",\r\n    \"model.add(Dropout(0.6))\\n\",\r\n    \"model.add(GlobalAveragePooling1D())  # Pooling layer\\n\",\r\n    \"model.add(Dense(len(y[1]), activation='softmax'))\\n\",\r\n    \"adam = optimizers.Adam(learning_rate=0.001)\\n\",\r\n    \"model.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy'])\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-09T03:58:13.389236Z\",\r\n     \"start_time\": \"2024-05-09T03:58:13.373684Z\"\r\n    }\r\n   },\r\n   \"id\": \"c870f2fa48fe956c\",\r\n   \"outputs\": [],\r\n   \"execution_count\": 940\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"history = model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=20, batch_size=1024,verbose=1)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-09T03:58:29.935930Z\",\r\n     \"start_time\": \"2024-05-09T03:58:13.744368Z\"\r\n    }\r\n   },\r\n   \"id\": \"d9a29cb1ff2dcba7\",\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Epoch 1/20\\n\",\r\n      \"\\u001B[1m12/47\\u001B[0m \\u001B[32m━━━━━\\u001B[0m\\u001B[37m━━━━━━━━━━━━━━━\\u001B[0m \\u001B[1m39s\\u001B[0m 1s/step - accuracy: 0.2644 - loss: 2.2490\"\r\n     ]\r\n    },\r\n    {\r\n     \"ename\": \"KeyboardInterrupt\",\r\n     \"evalue\": \"\",\r\n     \"output_type\": \"error\",\r\n     \"traceback\": [\r\n      \"\\u001B[0;31m---------------------------------------------------------------------------\\u001B[0m\",\r\n      \"\\u001B[0;31mKeyboardInterrupt\\u001B[0m                         Traceback (most recent call last)\",\r\n      \"Cell \\u001B[0;32mIn[941], line 1\\u001B[0m\\n\\u001B[0;32m----> 1\\u001B[0m history \\u001B[38;5;241m=\\u001B[39m \\u001B[43mmodel\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mfit\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[43mX_train\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43my_train\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43mvalidation_data\\u001B[49m\\u001B[38;5;241;43m=\\u001B[39;49m\\u001B[43m(\\u001B[49m\\u001B[43mX_val\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43my_val\\u001B[49m\\u001B[43m)\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43mepochs\\u001B[49m\\u001B[38;5;241;43m=\\u001B[39;49m\\u001B[38;5;241;43m20\\u001B[39;49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43mbatch_size\\u001B[49m\\u001B[38;5;241;43m=\\u001B[39;49m\\u001B[38;5;241;43m1024\\u001B[39;49m\\u001B[43m,\\u001B[49m\\u001B[43mverbose\\u001B[49m\\u001B[38;5;241;43m=\\u001B[39;49m\\u001B[38;5;241;43m1\\u001B[39;49m\\u001B[43m)\\u001B[49m\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/keras/src/utils/traceback_utils.py:117\\u001B[0m, in \\u001B[0;36mfilter_traceback.<locals>.error_handler\\u001B[0;34m(*args, **kwargs)\\u001B[0m\\n\\u001B[1;32m    115\\u001B[0m filtered_tb \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;28;01mNone\\u001B[39;00m\\n\\u001B[1;32m    116\\u001B[0m \\u001B[38;5;28;01mtry\\u001B[39;00m:\\n\\u001B[0;32m--> 117\\u001B[0m     \\u001B[38;5;28;01mreturn\\u001B[39;00m \\u001B[43mfn\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[43margs\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[43mkwargs\\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m    118\\u001B[0m \\u001B[38;5;28;01mexcept\\u001B[39;00m \\u001B[38;5;167;01mException\\u001B[39;00m \\u001B[38;5;28;01mas\\u001B[39;00m e:\\n\\u001B[1;32m    119\\u001B[0m     filtered_tb \\u001B[38;5;241m=\\u001B[39m _process_traceback_frames(e\\u001B[38;5;241m.\\u001B[39m__traceback__)\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/keras/src/backend/tensorflow/trainer.py:314\\u001B[0m, in \\u001B[0;36mTensorFlowTrainer.fit\\u001B[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq)\\u001B[0m\\n\\u001B[1;32m    312\\u001B[0m \\u001B[38;5;28;01mfor\\u001B[39;00m step, iterator \\u001B[38;5;129;01min\\u001B[39;00m epoch_iterator\\u001B[38;5;241m.\\u001B[39menumerate_epoch():\\n\\u001B[1;32m    313\\u001B[0m     callbacks\\u001B[38;5;241m.\\u001B[39mon_train_batch_begin(step)\\n\\u001B[0;32m--> 314\\u001B[0m     logs \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;28;43mself\\u001B[39;49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mtrain_function\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[43miterator\\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m    315\\u001B[0m     logs \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39m_pythonify_logs(logs)\\n\\u001B[1;32m    316\\u001B[0m     callbacks\\u001B[38;5;241m.\\u001B[39mon_train_batch_end(step, logs)\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/util/traceback_utils.py:150\\u001B[0m, in \\u001B[0;36mfilter_traceback.<locals>.error_handler\\u001B[0;34m(*args, **kwargs)\\u001B[0m\\n\\u001B[1;32m    148\\u001B[0m filtered_tb \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;28;01mNone\\u001B[39;00m\\n\\u001B[1;32m    149\\u001B[0m \\u001B[38;5;28;01mtry\\u001B[39;00m:\\n\\u001B[0;32m--> 150\\u001B[0m   \\u001B[38;5;28;01mreturn\\u001B[39;00m \\u001B[43mfn\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[43margs\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[43mkwargs\\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m    151\\u001B[0m \\u001B[38;5;28;01mexcept\\u001B[39;00m \\u001B[38;5;167;01mException\\u001B[39;00m \\u001B[38;5;28;01mas\\u001B[39;00m e:\\n\\u001B[1;32m    152\\u001B[0m   filtered_tb \\u001B[38;5;241m=\\u001B[39m _process_traceback_frames(e\\u001B[38;5;241m.\\u001B[39m__traceback__)\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:833\\u001B[0m, in \\u001B[0;36mFunction.__call__\\u001B[0;34m(self, *args, **kwds)\\u001B[0m\\n\\u001B[1;32m    830\\u001B[0m compiler \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;124m\\\"\\u001B[39m\\u001B[38;5;124mxla\\u001B[39m\\u001B[38;5;124m\\\"\\u001B[39m \\u001B[38;5;28;01mif\\u001B[39;00m \\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39m_jit_compile \\u001B[38;5;28;01melse\\u001B[39;00m \\u001B[38;5;124m\\\"\\u001B[39m\\u001B[38;5;124mnonXla\\u001B[39m\\u001B[38;5;124m\\\"\\u001B[39m\\n\\u001B[1;32m    832\\u001B[0m \\u001B[38;5;28;01mwith\\u001B[39;00m OptionalXlaContext(\\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39m_jit_compile):\\n\\u001B[0;32m--> 833\\u001B[0m   result \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;28;43mself\\u001B[39;49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43m_call\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[43margs\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[43mkwds\\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m    835\\u001B[0m new_tracing_count \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39mexperimental_get_tracing_count()\\n\\u001B[1;32m    836\\u001B[0m without_tracing \\u001B[38;5;241m=\\u001B[39m (tracing_count \\u001B[38;5;241m==\\u001B[39m new_tracing_count)\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:878\\u001B[0m, in \\u001B[0;36mFunction._call\\u001B[0;34m(self, *args, **kwds)\\u001B[0m\\n\\u001B[1;32m    875\\u001B[0m \\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39m_lock\\u001B[38;5;241m.\\u001B[39mrelease()\\n\\u001B[1;32m    876\\u001B[0m \\u001B[38;5;66;03m# In this case we have not created variables on the first call. So we can\\u001B[39;00m\\n\\u001B[1;32m    877\\u001B[0m \\u001B[38;5;66;03m# run the first trace but we should fail if variables are created.\\u001B[39;00m\\n\\u001B[0;32m--> 878\\u001B[0m results \\u001B[38;5;241m=\\u001B[39m \\u001B[43mtracing_compilation\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mcall_function\\u001B[49m\\u001B[43m(\\u001B[49m\\n\\u001B[1;32m    879\\u001B[0m \\u001B[43m    \\u001B[49m\\u001B[43margs\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43mkwds\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[38;5;28;43mself\\u001B[39;49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43m_variable_creation_config\\u001B[49m\\n\\u001B[1;32m    880\\u001B[0m \\u001B[43m\\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m    881\\u001B[0m \\u001B[38;5;28;01mif\\u001B[39;00m \\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39m_created_variables:\\n\\u001B[1;32m    882\\u001B[0m   \\u001B[38;5;28;01mraise\\u001B[39;00m \\u001B[38;5;167;01mValueError\\u001B[39;00m(\\u001B[38;5;124m\\\"\\u001B[39m\\u001B[38;5;124mCreating variables on a non-first call to a function\\u001B[39m\\u001B[38;5;124m\\\"\\u001B[39m\\n\\u001B[1;32m    883\\u001B[0m                    \\u001B[38;5;124m\\\"\\u001B[39m\\u001B[38;5;124m decorated with tf.function.\\u001B[39m\\u001B[38;5;124m\\\"\\u001B[39m)\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py:139\\u001B[0m, in \\u001B[0;36mcall_function\\u001B[0;34m(args, kwargs, tracing_options)\\u001B[0m\\n\\u001B[1;32m    137\\u001B[0m bound_args \\u001B[38;5;241m=\\u001B[39m function\\u001B[38;5;241m.\\u001B[39mfunction_type\\u001B[38;5;241m.\\u001B[39mbind(\\u001B[38;5;241m*\\u001B[39margs, \\u001B[38;5;241m*\\u001B[39m\\u001B[38;5;241m*\\u001B[39mkwargs)\\n\\u001B[1;32m    138\\u001B[0m flat_inputs \\u001B[38;5;241m=\\u001B[39m function\\u001B[38;5;241m.\\u001B[39mfunction_type\\u001B[38;5;241m.\\u001B[39munpack_inputs(bound_args)\\n\\u001B[0;32m--> 139\\u001B[0m \\u001B[38;5;28;01mreturn\\u001B[39;00m \\u001B[43mfunction\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43m_call_flat\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[43m  \\u001B[49m\\u001B[38;5;66;43;03m# pylint: disable=protected-access\\u001B[39;49;00m\\n\\u001B[1;32m    140\\u001B[0m \\u001B[43m    \\u001B[49m\\u001B[43mflat_inputs\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43mcaptured_inputs\\u001B[49m\\u001B[38;5;241;43m=\\u001B[39;49m\\u001B[43mfunction\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mcaptured_inputs\\u001B[49m\\n\\u001B[1;32m    141\\u001B[0m \\u001B[43m\\u001B[49m\\u001B[43m)\\u001B[49m\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/concrete_function.py:1322\\u001B[0m, in \\u001B[0;36mConcreteFunction._call_flat\\u001B[0;34m(self, tensor_inputs, captured_inputs)\\u001B[0m\\n\\u001B[1;32m   1318\\u001B[0m possible_gradient_type \\u001B[38;5;241m=\\u001B[39m gradients_util\\u001B[38;5;241m.\\u001B[39mPossibleTapeGradientTypes(args)\\n\\u001B[1;32m   1319\\u001B[0m \\u001B[38;5;28;01mif\\u001B[39;00m (possible_gradient_type \\u001B[38;5;241m==\\u001B[39m gradients_util\\u001B[38;5;241m.\\u001B[39mPOSSIBLE_GRADIENT_TYPES_NONE\\n\\u001B[1;32m   1320\\u001B[0m     \\u001B[38;5;129;01mand\\u001B[39;00m executing_eagerly):\\n\\u001B[1;32m   1321\\u001B[0m   \\u001B[38;5;66;03m# No tape is watching; skip to running the function.\\u001B[39;00m\\n\\u001B[0;32m-> 1322\\u001B[0m   \\u001B[38;5;28;01mreturn\\u001B[39;00m \\u001B[38;5;28;43mself\\u001B[39;49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43m_inference_function\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mcall_preflattened\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[43margs\\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m   1323\\u001B[0m forward_backward \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39m_select_forward_and_backward_functions(\\n\\u001B[1;32m   1324\\u001B[0m     args,\\n\\u001B[1;32m   1325\\u001B[0m     possible_gradient_type,\\n\\u001B[1;32m   1326\\u001B[0m     executing_eagerly)\\n\\u001B[1;32m   1327\\u001B[0m forward_function, args_with_tangents \\u001B[38;5;241m=\\u001B[39m forward_backward\\u001B[38;5;241m.\\u001B[39mforward()\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py:216\\u001B[0m, in \\u001B[0;36mAtomicFunction.call_preflattened\\u001B[0;34m(self, args)\\u001B[0m\\n\\u001B[1;32m    214\\u001B[0m \\u001B[38;5;28;01mdef\\u001B[39;00m \\u001B[38;5;21mcall_preflattened\\u001B[39m(\\u001B[38;5;28mself\\u001B[39m, args: Sequence[core\\u001B[38;5;241m.\\u001B[39mTensor]) \\u001B[38;5;241m-\\u001B[39m\\u001B[38;5;241m>\\u001B[39m Any:\\n\\u001B[1;32m    215\\u001B[0m \\u001B[38;5;250m  \\u001B[39m\\u001B[38;5;124;03m\\\"\\\"\\\"Calls with flattened tensor inputs and returns the structured output.\\\"\\\"\\\"\\u001B[39;00m\\n\\u001B[0;32m--> 216\\u001B[0m   flat_outputs \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;28;43mself\\u001B[39;49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mcall_flat\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[38;5;241;43m*\\u001B[39;49m\\u001B[43margs\\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m    217\\u001B[0m   \\u001B[38;5;28;01mreturn\\u001B[39;00m \\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39mfunction_type\\u001B[38;5;241m.\\u001B[39mpack_output(flat_outputs)\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py:251\\u001B[0m, in \\u001B[0;36mAtomicFunction.call_flat\\u001B[0;34m(self, *args)\\u001B[0m\\n\\u001B[1;32m    249\\u001B[0m \\u001B[38;5;28;01mwith\\u001B[39;00m record\\u001B[38;5;241m.\\u001B[39mstop_recording():\\n\\u001B[1;32m    250\\u001B[0m   \\u001B[38;5;28;01mif\\u001B[39;00m \\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39m_bound_context\\u001B[38;5;241m.\\u001B[39mexecuting_eagerly():\\n\\u001B[0;32m--> 251\\u001B[0m     outputs \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;28;43mself\\u001B[39;49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43m_bound_context\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mcall_function\\u001B[49m\\u001B[43m(\\u001B[49m\\n\\u001B[1;32m    252\\u001B[0m \\u001B[43m        \\u001B[49m\\u001B[38;5;28;43mself\\u001B[39;49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mname\\u001B[49m\\u001B[43m,\\u001B[49m\\n\\u001B[1;32m    253\\u001B[0m \\u001B[43m        \\u001B[49m\\u001B[38;5;28;43mlist\\u001B[39;49m\\u001B[43m(\\u001B[49m\\u001B[43margs\\u001B[49m\\u001B[43m)\\u001B[49m\\u001B[43m,\\u001B[49m\\n\\u001B[1;32m    254\\u001B[0m \\u001B[43m        \\u001B[49m\\u001B[38;5;28;43mlen\\u001B[39;49m\\u001B[43m(\\u001B[49m\\u001B[38;5;28;43mself\\u001B[39;49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mfunction_type\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mflat_outputs\\u001B[49m\\u001B[43m)\\u001B[49m\\u001B[43m,\\u001B[49m\\n\\u001B[1;32m    255\\u001B[0m \\u001B[43m    \\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m    256\\u001B[0m   \\u001B[38;5;28;01melse\\u001B[39;00m:\\n\\u001B[1;32m    257\\u001B[0m     outputs \\u001B[38;5;241m=\\u001B[39m make_call_op_in_graph(\\n\\u001B[1;32m    258\\u001B[0m         \\u001B[38;5;28mself\\u001B[39m,\\n\\u001B[1;32m    259\\u001B[0m         \\u001B[38;5;28mlist\\u001B[39m(args),\\n\\u001B[1;32m    260\\u001B[0m         \\u001B[38;5;28mself\\u001B[39m\\u001B[38;5;241m.\\u001B[39m_bound_context\\u001B[38;5;241m.\\u001B[39mfunction_call_options\\u001B[38;5;241m.\\u001B[39mas_attrs(),\\n\\u001B[1;32m    261\\u001B[0m     )\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/context.py:1500\\u001B[0m, in \\u001B[0;36mContext.call_function\\u001B[0;34m(self, name, tensor_inputs, num_outputs)\\u001B[0m\\n\\u001B[1;32m   1498\\u001B[0m cancellation_context \\u001B[38;5;241m=\\u001B[39m cancellation\\u001B[38;5;241m.\\u001B[39mcontext()\\n\\u001B[1;32m   1499\\u001B[0m \\u001B[38;5;28;01mif\\u001B[39;00m cancellation_context \\u001B[38;5;129;01mis\\u001B[39;00m \\u001B[38;5;28;01mNone\\u001B[39;00m:\\n\\u001B[0;32m-> 1500\\u001B[0m   outputs \\u001B[38;5;241m=\\u001B[39m \\u001B[43mexecute\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mexecute\\u001B[49m\\u001B[43m(\\u001B[49m\\n\\u001B[1;32m   1501\\u001B[0m \\u001B[43m      \\u001B[49m\\u001B[43mname\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mdecode\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[38;5;124;43m\\\"\\u001B[39;49m\\u001B[38;5;124;43mutf-8\\u001B[39;49m\\u001B[38;5;124;43m\\\"\\u001B[39;49m\\u001B[43m)\\u001B[49m\\u001B[43m,\\u001B[49m\\n\\u001B[1;32m   1502\\u001B[0m \\u001B[43m      \\u001B[49m\\u001B[43mnum_outputs\\u001B[49m\\u001B[38;5;241;43m=\\u001B[39;49m\\u001B[43mnum_outputs\\u001B[49m\\u001B[43m,\\u001B[49m\\n\\u001B[1;32m   1503\\u001B[0m \\u001B[43m      \\u001B[49m\\u001B[43minputs\\u001B[49m\\u001B[38;5;241;43m=\\u001B[39;49m\\u001B[43mtensor_inputs\\u001B[49m\\u001B[43m,\\u001B[49m\\n\\u001B[1;32m   1504\\u001B[0m \\u001B[43m      \\u001B[49m\\u001B[43mattrs\\u001B[49m\\u001B[38;5;241;43m=\\u001B[39;49m\\u001B[43mattrs\\u001B[49m\\u001B[43m,\\u001B[49m\\n\\u001B[1;32m   1505\\u001B[0m \\u001B[43m      \\u001B[49m\\u001B[43mctx\\u001B[49m\\u001B[38;5;241;43m=\\u001B[39;49m\\u001B[38;5;28;43mself\\u001B[39;49m\\u001B[43m,\\u001B[49m\\n\\u001B[1;32m   1506\\u001B[0m \\u001B[43m  \\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m   1507\\u001B[0m \\u001B[38;5;28;01melse\\u001B[39;00m:\\n\\u001B[1;32m   1508\\u001B[0m   outputs \\u001B[38;5;241m=\\u001B[39m execute\\u001B[38;5;241m.\\u001B[39mexecute_with_cancellation(\\n\\u001B[1;32m   1509\\u001B[0m       name\\u001B[38;5;241m.\\u001B[39mdecode(\\u001B[38;5;124m\\\"\\u001B[39m\\u001B[38;5;124mutf-8\\u001B[39m\\u001B[38;5;124m\\\"\\u001B[39m),\\n\\u001B[1;32m   1510\\u001B[0m       num_outputs\\u001B[38;5;241m=\\u001B[39mnum_outputs,\\n\\u001B[0;32m   (...)\\u001B[0m\\n\\u001B[1;32m   1514\\u001B[0m       cancellation_manager\\u001B[38;5;241m=\\u001B[39mcancellation_context,\\n\\u001B[1;32m   1515\\u001B[0m   )\\n\",\r\n      \"File \\u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/execute.py:53\\u001B[0m, in \\u001B[0;36mquick_execute\\u001B[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\\u001B[0m\\n\\u001B[1;32m     51\\u001B[0m \\u001B[38;5;28;01mtry\\u001B[39;00m:\\n\\u001B[1;32m     52\\u001B[0m   ctx\\u001B[38;5;241m.\\u001B[39mensure_initialized()\\n\\u001B[0;32m---> 53\\u001B[0m   tensors \\u001B[38;5;241m=\\u001B[39m \\u001B[43mpywrap_tfe\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43mTFE_Py_Execute\\u001B[49m\\u001B[43m(\\u001B[49m\\u001B[43mctx\\u001B[49m\\u001B[38;5;241;43m.\\u001B[39;49m\\u001B[43m_handle\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43mdevice_name\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43mop_name\\u001B[49m\\u001B[43m,\\u001B[49m\\n\\u001B[1;32m     54\\u001B[0m \\u001B[43m                                      \\u001B[49m\\u001B[43minputs\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43mattrs\\u001B[49m\\u001B[43m,\\u001B[49m\\u001B[43m \\u001B[49m\\u001B[43mnum_outputs\\u001B[49m\\u001B[43m)\\u001B[49m\\n\\u001B[1;32m     55\\u001B[0m \\u001B[38;5;28;01mexcept\\u001B[39;00m core\\u001B[38;5;241m.\\u001B[39m_NotOkStatusException \\u001B[38;5;28;01mas\\u001B[39;00m e:\\n\\u001B[1;32m     56\\u001B[0m   \\u001B[38;5;28;01mif\\u001B[39;00m name \\u001B[38;5;129;01mis\\u001B[39;00m \\u001B[38;5;129;01mnot\\u001B[39;00m \\u001B[38;5;28;01mNone\\u001B[39;00m:\\n\",\r\n      \"\\u001B[0;31mKeyboardInterrupt\\u001B[0m: \"\r\n     ]\r\n    }\r\n   ],\r\n   \"execution_count\": 941\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"%matplotlib inline\\n\",\r\n    \"plt.plot(history.history['loss'])\\n\",\r\n    \"plt.plot(history.history['val_loss'])\\n\",\r\n    \"plt.title(\\\"Model's MSE\\\")\\n\",\r\n    \"plt.legend(['Train', 'Val'], loc='upper right')\\n\",\r\n    \"plt.ylabel('Loss')\\n\",\r\n    \"plt.xlabel('Epoch')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2024-05-09T03:58:07.547012Z\"\r\n    }\r\n   },\r\n   \"id\": \"db97a7f3cc91e456\",\r\n   \"outputs\": [],\r\n   \"execution_count\": null\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# Prediction\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   },\r\n   \"id\": \"4fb3930ce2fec85d\"\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"prediction_word = \\\"också en kvinna\\\"\\n\",\r\n    \"prediction_word = tokenizer.texts_to_sequences([prediction_word])\\n\",\r\n    \"prediction_word = pad_sequences(prediction_word, maxlen=input_dim)\\n\",\r\n    \"prediction = model.predict([prediction_word])\\n\",\r\n    \"output_probabilities = np.array(prediction)\\n\",\r\n    \"\\n\",\r\n    \"result = []\\n\",\r\n    \"class_labels = np.unique(y_pre_training)\\n\",\r\n    \"for index, prediction in enumerate(output_probabilities[0]):\\n\",\r\n    \"    result.append(f\\\"{class_labels[index]} - {round(prediction*100, 1)}%\\\")\\n\",\r\n    \"\\n\",\r\n    \"for r in result:\\n\",\r\n    \"    print(r)\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2024-05-09T03:58:07.549066Z\"\r\n    }\r\n   },\r\n   \"id\": \"2af1ef5d86413ee6\",\r\n   \"outputs\": [],\r\n   \"execution_count\": null\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": \"model.save('./model.keras')\",\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-05-09T03:58:07.552025Z\",\r\n     \"start_time\": \"2024-05-09T03:58:07.550429Z\"\r\n    }\r\n   },\r\n   \"id\": \"f103d5e7cc3146d9\",\r\n   \"outputs\": [],\r\n   \"execution_count\": null\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"Python 3\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 2\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython2\",\r\n   \"version\": \"2.7.6\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 5\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model.ipynb b/model.ipynb
--- a/model.ipynb	(revision a7d77bb972a0abe76a7d99906a318ed7684f5ee8)
+++ b/model.ipynb	(date 1715262667310)
@@ -6,8 +6,8 @@
    "metadata": {
     "collapsed": true,
     "ExecuteTime": {
-     "end_time": "2024-05-09T03:57:39.139571Z",
-     "start_time": "2024-05-09T03:57:39.134441Z"
+     "end_time": "2024-05-09T03:59:26.796203Z",
+     "start_time": "2024-05-09T03:59:26.791260Z"
     }
    },
    "source": [
@@ -24,7 +24,7 @@
     "from sklearn.model_selection import train_test_split"
    ],
    "outputs": [],
-   "execution_count": 935
+   "execution_count": 71
   },
   {
    "cell_type": "markdown",
@@ -48,23 +48,82 @@
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "end_time": "2024-05-09T03:57:39.192815Z",
-     "start_time": "2024-05-09T03:57:39.143716Z"
+     "end_time": "2024-05-09T03:59:26.893473Z",
+     "start_time": "2024-05-09T03:59:26.810169Z"
     }
    },
    "id": "9934f095638f49f4",
    "outputs": [
     {
      "data": {
-      "text/plain": "                                       Word    Language\n19107                           we’ll do it     English\n39550              antes della já se falava  Portuguese\n18536  you saw what he wrote on the wall he     English\n2807                   meende waar te nemen       Dutch\n8350              jährlich steigend bis zum      German",
-      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Word</th>\n      <th>Language</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>19107</th>\n      <td>we’ll do it</td>\n      <td>English</td>\n    </tr>\n    <tr>\n      <th>39550</th>\n      <td>antes della já se falava</td>\n      <td>Portuguese</td>\n    </tr>\n    <tr>\n      <th>18536</th>\n      <td>you saw what he wrote on the wall he</td>\n      <td>English</td>\n    </tr>\n    <tr>\n      <th>2807</th>\n      <td>meende waar te nemen</td>\n      <td>Dutch</td>\n    </tr>\n    <tr>\n      <th>8350</th>\n      <td>jährlich steigend bis zum</td>\n      <td>German</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
+      "text/plain": [
+       "                                       Word    Language\n",
+       "19107                           we’ll do it     English\n",
+       "39550              antes della já se falava  Portuguese\n",
+       "18536  you saw what he wrote on the wall he     English\n",
+       "2807                   meende waar te nemen       Dutch\n",
+       "8350              jährlich steigend bis zum      German"
+      ],
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>Word</th>\n",
+       "      <th>Language</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>19107</th>\n",
+       "      <td>we’ll do it</td>\n",
+       "      <td>English</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>39550</th>\n",
+       "      <td>antes della já se falava</td>\n",
+       "      <td>Portuguese</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>18536</th>\n",
+       "      <td>you saw what he wrote on the wall he</td>\n",
+       "      <td>English</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2807</th>\n",
+       "      <td>meende waar te nemen</td>\n",
+       "      <td>Dutch</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>8350</th>\n",
+       "      <td>jährlich steigend bis zum</td>\n",
+       "      <td>German</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ]
      },
-     "execution_count": 936,
+     "execution_count": 72,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
-   "execution_count": 936
+   "execution_count": 72
   },
   {
    "cell_type": "markdown",
@@ -106,8 +165,8 @@
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "end_time": "2024-05-09T03:57:39.816997Z",
-     "start_time": "2024-05-09T03:57:39.192387Z"
+     "end_time": "2024-05-09T03:59:27.935898Z",
+     "start_time": "2024-05-09T03:59:26.894473Z"
     }
    },
    "id": "ba4d86402045de27",
@@ -121,42 +180,40 @@
      ]
     }
    ],
-   "execution_count": 937
+   "execution_count": 73
   },
   {
    "cell_type": "code",
    "source": [
     "model = Sequential()\n",
     "model.add(Conv1D(input_dim, 5, activation='relu'))  # Convolutional layer\n",
-    "tf.keras.layers.SimpleRNN(5, activation='relu'),\n",
+    "tf.keras.layers.SimpleRNN(10, activation='relu'),\n",
     "model.add(LSTM(512, return_sequences=True))\n",
     "model.add(Dropout(0.6))\n",
     "model.add(GlobalAveragePooling1D())  # Pooling layer\n",
     "model.add(Dense(len(y[1]), activation='softmax'))\n",
-    "adam = optimizers.Adam(learning_rate=0.001)\n",
+    "adam = optimizers.Adam(learning_rate=0.01)\n",
     "model.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy'])"
    ],
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "end_time": "2024-05-09T03:58:13.389236Z",
-     "start_time": "2024-05-09T03:58:13.373684Z"
+     "end_time": "2024-05-09T13:11:10.201864Z",
+     "start_time": "2024-05-09T13:11:10.181420Z"
     }
    },
    "id": "c870f2fa48fe956c",
    "outputs": [],
-   "execution_count": 940
+   "execution_count": 81
   },
   {
    "cell_type": "code",
-   "source": [
-    "history = model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=20, batch_size=1024,verbose=1)"
-   ],
+   "source": "history = model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=30, batch_size=1024,verbose=1)",
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "end_time": "2024-05-09T03:58:29.935930Z",
-     "start_time": "2024-05-09T03:58:13.744368Z"
+     "end_time": "2024-05-09T13:50:48.089343Z",
+     "start_time": "2024-05-09T13:11:10.377622Z"
     }
    },
    "id": "d9a29cb1ff2dcba7",
@@ -165,34 +222,70 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Epoch 1/20\n",
-      "\u001B[1m12/47\u001B[0m \u001B[32m━━━━━\u001B[0m\u001B[37m━━━━━━━━━━━━━━━\u001B[0m \u001B[1m39s\u001B[0m 1s/step - accuracy: 0.2644 - loss: 2.2490"
-     ]
-    },
-    {
-     "ename": "KeyboardInterrupt",
-     "evalue": "",
-     "output_type": "error",
-     "traceback": [
-      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
-      "\u001B[0;31mKeyboardInterrupt\u001B[0m                         Traceback (most recent call last)",
-      "Cell \u001B[0;32mIn[941], line 1\u001B[0m\n\u001B[0;32m----> 1\u001B[0m history \u001B[38;5;241m=\u001B[39m \u001B[43mmodel\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mfit\u001B[49m\u001B[43m(\u001B[49m\u001B[43mX_train\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43my_train\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mvalidation_data\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43mX_val\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43my_val\u001B[49m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mepochs\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;241;43m20\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mbatch_size\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;241;43m1024\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43mverbose\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;241;43m1\u001B[39;49m\u001B[43m)\u001B[49m\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/keras/src/utils/traceback_utils.py:117\u001B[0m, in \u001B[0;36mfilter_traceback.<locals>.error_handler\u001B[0;34m(*args, **kwargs)\u001B[0m\n\u001B[1;32m    115\u001B[0m filtered_tb \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;01mNone\u001B[39;00m\n\u001B[1;32m    116\u001B[0m \u001B[38;5;28;01mtry\u001B[39;00m:\n\u001B[0;32m--> 117\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mfn\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    118\u001B[0m \u001B[38;5;28;01mexcept\u001B[39;00m \u001B[38;5;167;01mException\u001B[39;00m \u001B[38;5;28;01mas\u001B[39;00m e:\n\u001B[1;32m    119\u001B[0m     filtered_tb \u001B[38;5;241m=\u001B[39m _process_traceback_frames(e\u001B[38;5;241m.\u001B[39m__traceback__)\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/keras/src/backend/tensorflow/trainer.py:314\u001B[0m, in \u001B[0;36mTensorFlowTrainer.fit\u001B[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq)\u001B[0m\n\u001B[1;32m    312\u001B[0m \u001B[38;5;28;01mfor\u001B[39;00m step, iterator \u001B[38;5;129;01min\u001B[39;00m epoch_iterator\u001B[38;5;241m.\u001B[39menumerate_epoch():\n\u001B[1;32m    313\u001B[0m     callbacks\u001B[38;5;241m.\u001B[39mon_train_batch_begin(step)\n\u001B[0;32m--> 314\u001B[0m     logs \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mtrain_function\u001B[49m\u001B[43m(\u001B[49m\u001B[43miterator\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    315\u001B[0m     logs \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_pythonify_logs(logs)\n\u001B[1;32m    316\u001B[0m     callbacks\u001B[38;5;241m.\u001B[39mon_train_batch_end(step, logs)\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/util/traceback_utils.py:150\u001B[0m, in \u001B[0;36mfilter_traceback.<locals>.error_handler\u001B[0;34m(*args, **kwargs)\u001B[0m\n\u001B[1;32m    148\u001B[0m filtered_tb \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;01mNone\u001B[39;00m\n\u001B[1;32m    149\u001B[0m \u001B[38;5;28;01mtry\u001B[39;00m:\n\u001B[0;32m--> 150\u001B[0m   \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mfn\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    151\u001B[0m \u001B[38;5;28;01mexcept\u001B[39;00m \u001B[38;5;167;01mException\u001B[39;00m \u001B[38;5;28;01mas\u001B[39;00m e:\n\u001B[1;32m    152\u001B[0m   filtered_tb \u001B[38;5;241m=\u001B[39m _process_traceback_frames(e\u001B[38;5;241m.\u001B[39m__traceback__)\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:833\u001B[0m, in \u001B[0;36mFunction.__call__\u001B[0;34m(self, *args, **kwds)\u001B[0m\n\u001B[1;32m    830\u001B[0m compiler \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mxla\u001B[39m\u001B[38;5;124m\"\u001B[39m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_jit_compile \u001B[38;5;28;01melse\u001B[39;00m \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mnonXla\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m    832\u001B[0m \u001B[38;5;28;01mwith\u001B[39;00m OptionalXlaContext(\u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_jit_compile):\n\u001B[0;32m--> 833\u001B[0m   result \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_call\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwds\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    835\u001B[0m new_tracing_count \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mexperimental_get_tracing_count()\n\u001B[1;32m    836\u001B[0m without_tracing \u001B[38;5;241m=\u001B[39m (tracing_count \u001B[38;5;241m==\u001B[39m new_tracing_count)\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:878\u001B[0m, in \u001B[0;36mFunction._call\u001B[0;34m(self, *args, **kwds)\u001B[0m\n\u001B[1;32m    875\u001B[0m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_lock\u001B[38;5;241m.\u001B[39mrelease()\n\u001B[1;32m    876\u001B[0m \u001B[38;5;66;03m# In this case we have not created variables on the first call. So we can\u001B[39;00m\n\u001B[1;32m    877\u001B[0m \u001B[38;5;66;03m# run the first trace but we should fail if variables are created.\u001B[39;00m\n\u001B[0;32m--> 878\u001B[0m results \u001B[38;5;241m=\u001B[39m \u001B[43mtracing_compilation\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mcall_function\u001B[49m\u001B[43m(\u001B[49m\n\u001B[1;32m    879\u001B[0m \u001B[43m    \u001B[49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mkwds\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_variable_creation_config\u001B[49m\n\u001B[1;32m    880\u001B[0m \u001B[43m\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    881\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_created_variables:\n\u001B[1;32m    882\u001B[0m   \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mCreating variables on a non-first call to a function\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m    883\u001B[0m                    \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m decorated with tf.function.\u001B[39m\u001B[38;5;124m\"\u001B[39m)\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py:139\u001B[0m, in \u001B[0;36mcall_function\u001B[0;34m(args, kwargs, tracing_options)\u001B[0m\n\u001B[1;32m    137\u001B[0m bound_args \u001B[38;5;241m=\u001B[39m function\u001B[38;5;241m.\u001B[39mfunction_type\u001B[38;5;241m.\u001B[39mbind(\u001B[38;5;241m*\u001B[39margs, \u001B[38;5;241m*\u001B[39m\u001B[38;5;241m*\u001B[39mkwargs)\n\u001B[1;32m    138\u001B[0m flat_inputs \u001B[38;5;241m=\u001B[39m function\u001B[38;5;241m.\u001B[39mfunction_type\u001B[38;5;241m.\u001B[39munpack_inputs(bound_args)\n\u001B[0;32m--> 139\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mfunction\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_call_flat\u001B[49m\u001B[43m(\u001B[49m\u001B[43m  \u001B[49m\u001B[38;5;66;43;03m# pylint: disable=protected-access\u001B[39;49;00m\n\u001B[1;32m    140\u001B[0m \u001B[43m    \u001B[49m\u001B[43mflat_inputs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mcaptured_inputs\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mfunction\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mcaptured_inputs\u001B[49m\n\u001B[1;32m    141\u001B[0m \u001B[43m\u001B[49m\u001B[43m)\u001B[49m\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/concrete_function.py:1322\u001B[0m, in \u001B[0;36mConcreteFunction._call_flat\u001B[0;34m(self, tensor_inputs, captured_inputs)\u001B[0m\n\u001B[1;32m   1318\u001B[0m possible_gradient_type \u001B[38;5;241m=\u001B[39m gradients_util\u001B[38;5;241m.\u001B[39mPossibleTapeGradientTypes(args)\n\u001B[1;32m   1319\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m (possible_gradient_type \u001B[38;5;241m==\u001B[39m gradients_util\u001B[38;5;241m.\u001B[39mPOSSIBLE_GRADIENT_TYPES_NONE\n\u001B[1;32m   1320\u001B[0m     \u001B[38;5;129;01mand\u001B[39;00m executing_eagerly):\n\u001B[1;32m   1321\u001B[0m   \u001B[38;5;66;03m# No tape is watching; skip to running the function.\u001B[39;00m\n\u001B[0;32m-> 1322\u001B[0m   \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_inference_function\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mcall_preflattened\u001B[49m\u001B[43m(\u001B[49m\u001B[43margs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1323\u001B[0m forward_backward \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_select_forward_and_backward_functions(\n\u001B[1;32m   1324\u001B[0m     args,\n\u001B[1;32m   1325\u001B[0m     possible_gradient_type,\n\u001B[1;32m   1326\u001B[0m     executing_eagerly)\n\u001B[1;32m   1327\u001B[0m forward_function, args_with_tangents \u001B[38;5;241m=\u001B[39m forward_backward\u001B[38;5;241m.\u001B[39mforward()\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py:216\u001B[0m, in \u001B[0;36mAtomicFunction.call_preflattened\u001B[0;34m(self, args)\u001B[0m\n\u001B[1;32m    214\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21mcall_preflattened\u001B[39m(\u001B[38;5;28mself\u001B[39m, args: Sequence[core\u001B[38;5;241m.\u001B[39mTensor]) \u001B[38;5;241m-\u001B[39m\u001B[38;5;241m>\u001B[39m Any:\n\u001B[1;32m    215\u001B[0m \u001B[38;5;250m  \u001B[39m\u001B[38;5;124;03m\"\"\"Calls with flattened tensor inputs and returns the structured output.\"\"\"\u001B[39;00m\n\u001B[0;32m--> 216\u001B[0m   flat_outputs \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mcall_flat\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    217\u001B[0m   \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mfunction_type\u001B[38;5;241m.\u001B[39mpack_output(flat_outputs)\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py:251\u001B[0m, in \u001B[0;36mAtomicFunction.call_flat\u001B[0;34m(self, *args)\u001B[0m\n\u001B[1;32m    249\u001B[0m \u001B[38;5;28;01mwith\u001B[39;00m record\u001B[38;5;241m.\u001B[39mstop_recording():\n\u001B[1;32m    250\u001B[0m   \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_bound_context\u001B[38;5;241m.\u001B[39mexecuting_eagerly():\n\u001B[0;32m--> 251\u001B[0m     outputs \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_bound_context\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mcall_function\u001B[49m\u001B[43m(\u001B[49m\n\u001B[1;32m    252\u001B[0m \u001B[43m        \u001B[49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mname\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    253\u001B[0m \u001B[43m        \u001B[49m\u001B[38;5;28;43mlist\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43margs\u001B[49m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    254\u001B[0m \u001B[43m        \u001B[49m\u001B[38;5;28;43mlen\u001B[39;49m\u001B[43m(\u001B[49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mfunction_type\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mflat_outputs\u001B[49m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    255\u001B[0m \u001B[43m    \u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    256\u001B[0m   \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[1;32m    257\u001B[0m     outputs \u001B[38;5;241m=\u001B[39m make_call_op_in_graph(\n\u001B[1;32m    258\u001B[0m         \u001B[38;5;28mself\u001B[39m,\n\u001B[1;32m    259\u001B[0m         \u001B[38;5;28mlist\u001B[39m(args),\n\u001B[1;32m    260\u001B[0m         \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_bound_context\u001B[38;5;241m.\u001B[39mfunction_call_options\u001B[38;5;241m.\u001B[39mas_attrs(),\n\u001B[1;32m    261\u001B[0m     )\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/context.py:1500\u001B[0m, in \u001B[0;36mContext.call_function\u001B[0;34m(self, name, tensor_inputs, num_outputs)\u001B[0m\n\u001B[1;32m   1498\u001B[0m cancellation_context \u001B[38;5;241m=\u001B[39m cancellation\u001B[38;5;241m.\u001B[39mcontext()\n\u001B[1;32m   1499\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m cancellation_context \u001B[38;5;129;01mis\u001B[39;00m \u001B[38;5;28;01mNone\u001B[39;00m:\n\u001B[0;32m-> 1500\u001B[0m   outputs \u001B[38;5;241m=\u001B[39m \u001B[43mexecute\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mexecute\u001B[49m\u001B[43m(\u001B[49m\n\u001B[1;32m   1501\u001B[0m \u001B[43m      \u001B[49m\u001B[43mname\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mdecode\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mutf-8\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1502\u001B[0m \u001B[43m      \u001B[49m\u001B[43mnum_outputs\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mnum_outputs\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1503\u001B[0m \u001B[43m      \u001B[49m\u001B[43minputs\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mtensor_inputs\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1504\u001B[0m \u001B[43m      \u001B[49m\u001B[43mattrs\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mattrs\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1505\u001B[0m \u001B[43m      \u001B[49m\u001B[43mctx\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1506\u001B[0m \u001B[43m  \u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1507\u001B[0m \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[1;32m   1508\u001B[0m   outputs \u001B[38;5;241m=\u001B[39m execute\u001B[38;5;241m.\u001B[39mexecute_with_cancellation(\n\u001B[1;32m   1509\u001B[0m       name\u001B[38;5;241m.\u001B[39mdecode(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mutf-8\u001B[39m\u001B[38;5;124m\"\u001B[39m),\n\u001B[1;32m   1510\u001B[0m       num_outputs\u001B[38;5;241m=\u001B[39mnum_outputs,\n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m   1514\u001B[0m       cancellation_manager\u001B[38;5;241m=\u001B[39mcancellation_context,\n\u001B[1;32m   1515\u001B[0m   )\n",
-      "File \u001B[0;32m~/PycharmProjects/languageLense/.venv/lib/python3.9/site-packages/tensorflow/python/eager/execute.py:53\u001B[0m, in \u001B[0;36mquick_execute\u001B[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001B[0m\n\u001B[1;32m     51\u001B[0m \u001B[38;5;28;01mtry\u001B[39;00m:\n\u001B[1;32m     52\u001B[0m   ctx\u001B[38;5;241m.\u001B[39mensure_initialized()\n\u001B[0;32m---> 53\u001B[0m   tensors \u001B[38;5;241m=\u001B[39m \u001B[43mpywrap_tfe\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mTFE_Py_Execute\u001B[49m\u001B[43m(\u001B[49m\u001B[43mctx\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_handle\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mdevice_name\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mop_name\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m     54\u001B[0m \u001B[43m                                      \u001B[49m\u001B[43minputs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mattrs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mnum_outputs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m     55\u001B[0m \u001B[38;5;28;01mexcept\u001B[39;00m core\u001B[38;5;241m.\u001B[39m_NotOkStatusException \u001B[38;5;28;01mas\u001B[39;00m e:\n\u001B[1;32m     56\u001B[0m   \u001B[38;5;28;01mif\u001B[39;00m name \u001B[38;5;129;01mis\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;28;01mNone\u001B[39;00m:\n",
-      "\u001B[0;31mKeyboardInterrupt\u001B[0m: "
+      "Epoch 1/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m82s\u001B[0m 2s/step - accuracy: 0.3005 - loss: 2.3941 - val_accuracy: 0.4474 - val_loss: 1.6738\n",
+      "Epoch 2/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.4789 - loss: 1.6015 - val_accuracy: 0.5070 - val_loss: 1.4876\n",
+      "Epoch 3/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.5379 - loss: 1.3993 - val_accuracy: 0.5779 - val_loss: 1.2474\n",
+      "Epoch 4/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.5960 - loss: 1.2123 - val_accuracy: 0.6354 - val_loss: 1.0877\n",
+      "Epoch 5/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.6550 - loss: 1.0283 - val_accuracy: 0.6837 - val_loss: 0.9312\n",
+      "Epoch 6/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.7003 - loss: 0.8805 - val_accuracy: 0.7245 - val_loss: 0.8103\n",
+      "Epoch 7/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.7478 - loss: 0.7440 - val_accuracy: 0.7383 - val_loss: 0.7752\n",
+      "Epoch 8/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.7758 - loss: 0.6433 - val_accuracy: 0.7754 - val_loss: 0.6458\n",
+      "Epoch 9/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.8060 - loss: 0.5649 - val_accuracy: 0.7938 - val_loss: 0.6034\n",
+      "Epoch 10/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.8252 - loss: 0.5035 - val_accuracy: 0.8068 - val_loss: 0.5647\n",
+      "Epoch 11/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.8360 - loss: 0.4627 - val_accuracy: 0.8042 - val_loss: 0.5691\n",
+      "Epoch 12/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.8562 - loss: 0.4087 - val_accuracy: 0.8079 - val_loss: 0.5530\n",
+      "Epoch 13/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.8642 - loss: 0.3831 - val_accuracy: 0.8249 - val_loss: 0.5094\n",
+      "Epoch 14/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.8791 - loss: 0.3406 - val_accuracy: 0.8256 - val_loss: 0.5147\n",
+      "Epoch 15/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m80s\u001B[0m 2s/step - accuracy: 0.8841 - loss: 0.3341 - val_accuracy: 0.8288 - val_loss: 0.5075\n",
+      "Epoch 16/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.8913 - loss: 0.3078 - val_accuracy: 0.8359 - val_loss: 0.4941\n",
+      "Epoch 17/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.8965 - loss: 0.2929 - val_accuracy: 0.8392 - val_loss: 0.4805\n",
+      "Epoch 18/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.9027 - loss: 0.2726 - val_accuracy: 0.8463 - val_loss: 0.4729\n",
+      "Epoch 19/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.9072 - loss: 0.2627 - val_accuracy: 0.8404 - val_loss: 0.4756\n",
+      "Epoch 20/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.9064 - loss: 0.2598 - val_accuracy: 0.8396 - val_loss: 0.5145\n",
+      "Epoch 21/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.9148 - loss: 0.2416 - val_accuracy: 0.8277 - val_loss: 0.5296\n",
+      "Epoch 22/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.9055 - loss: 0.2601 - val_accuracy: 0.8354 - val_loss: 0.5181\n",
+      "Epoch 23/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.9107 - loss: 0.2532 - val_accuracy: 0.8443 - val_loss: 0.4881\n",
+      "Epoch 24/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.9193 - loss: 0.2263 - val_accuracy: 0.8373 - val_loss: 0.5223\n",
+      "Epoch 25/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.9153 - loss: 0.2317 - val_accuracy: 0.8395 - val_loss: 0.5154\n",
+      "Epoch 26/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.9213 - loss: 0.2210 - val_accuracy: 0.8428 - val_loss: 0.5016\n",
+      "Epoch 27/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m79s\u001B[0m 2s/step - accuracy: 0.9227 - loss: 0.2196 - val_accuracy: 0.8389 - val_loss: 0.5241\n",
+      "Epoch 28/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m80s\u001B[0m 2s/step - accuracy: 0.9042 - loss: 0.2678 - val_accuracy: 0.8344 - val_loss: 0.5115\n",
+      "Epoch 29/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m81s\u001B[0m 2s/step - accuracy: 0.9154 - loss: 0.2393 - val_accuracy: 0.8405 - val_loss: 0.4960\n",
+      "Epoch 30/30\n",
+      "\u001B[1m47/47\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m80s\u001B[0m 2s/step - accuracy: 0.9224 - loss: 0.2205 - val_accuracy: 0.8379 - val_loss: 0.5056\n"
      ]
     }
    ],
-   "execution_count": 941
+   "execution_count": 82
   },
   {
    "cell_type": "code",
@@ -208,12 +301,34 @@
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "start_time": "2024-05-09T03:58:07.547012Z"
+     "end_time": "2024-05-09T13:50:51.736641Z",
+     "start_time": "2024-05-09T13:50:51.457031Z"
     }
    },
    "id": "db97a7f3cc91e456",
-   "outputs": [],
-   "execution_count": null
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "Text(0.5, 0, 'Epoch')"
+      ]
+     },
+     "execution_count": 83,
+     "metadata": {},
+     "output_type": "execute_result"
+    },
+    {
+     "data": {
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ],
+      "image/png": ""
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "execution_count": 83
   },
   {
    "cell_type": "markdown",
@@ -245,12 +360,34 @@
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "start_time": "2024-05-09T03:58:07.549066Z"
+     "end_time": "2024-05-09T13:04:47.326679Z",
+     "start_time": "2024-05-09T13:04:47.229456Z"
     }
    },
    "id": "2af1ef5d86413ee6",
-   "outputs": [],
-   "execution_count": null
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "\u001B[1m1/1\u001B[0m \u001B[32m━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[37m\u001B[0m \u001B[1m0s\u001B[0m 31ms/step\n",
+      "Danish - 23.4%\n",
+      "Dutch - 1.1%\n",
+      "English - 26.5%\n",
+      "French - 1.5%\n",
+      "German - 0.5%\n",
+      "Greek - 0.2%\n",
+      "Italian - 0.8%\n",
+      "Norwegian - 32.4%\n",
+      "Polish - 8.5%\n",
+      "Portuguese - 1.3%\n",
+      "Russian - 0.1%\n",
+      "Spanish - 0.8%\n",
+      "Swedish - 2.9%\n"
+     ]
+    }
+   ],
+   "execution_count": 80
   },
   {
    "cell_type": "code",
@@ -258,13 +395,13 @@
    "metadata": {
     "collapsed": false,
     "ExecuteTime": {
-     "end_time": "2024-05-09T03:58:07.552025Z",
-     "start_time": "2024-05-09T03:58:07.550429Z"
+     "end_time": "2024-05-09T04:39:07.880606Z",
+     "start_time": "2024-05-09T04:39:07.817827Z"
     }
    },
    "id": "f103d5e7cc3146d9",
    "outputs": [],
-   "execution_count": null
+   "execution_count": 78
   }
  ],
  "metadata": {
